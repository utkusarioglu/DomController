{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Common/c_controller.ts","webpack:///./src/Common/t_controller.ts","webpack:///./src/Controller/controller.ts","webpack:///./node_modules/@utkusarioglu/resolver/index.js","webpack:///./src/Common/separator_handler.ts","webpack:///./src/index.ts","webpack:///./src/BaseController/base_controller.ts","webpack:///(webpack)/buildin/global.js","webpack:///./src/Mixins/m_controller.ts","webpack:///./src/Mixins/m_controller_events.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RI","C_Controller","AllServices","GraceTime","E_AlreadyDefined","E_CalledBeforeDeclaration","E_NoScopeSelected","join","E_MultipleRequestsBeforeResponse","E_ForcedDynamic","E_ActiveStepMemberCount","C_BootState","ClassReady","ListenReady","TalkReady","ModulesReady","DependencyReady","ServerReady","TestReady","ModuleInstalled","LibraryAdded","C_StartupTalk","run_Listen","run_Talk","run_Requests","run_Modules","run_Server","run_Tests","send_Archive","add_Archive","e_Scope","e_ServiceGroup","Controller","SeparatorHandler","namespace","super","this","set_GlobalNamespace","set_GlobalController","_global_controller","BaseController","Global","get_EventEmitter","flush_GlobalNamespaces","undefined","event_emitter","_event_emitter_class","responding_namespace","talk","scope","group","Standard","responding_channel","get_Separator","instruction_code","Resolution","produce_UniqueInstructionCode","is_StaticResponder","_forced_dynamic_service","_static_content_archive","sniff","dynamic_transmission","request_DynamicTransmission","set_PromisifiedStaticContent","static_transmisson","console","warn","Time","Date","getTime","Promise","resolve","recipient_namespace","get_Scopes","request","_controller_global_namespace","response_callback","is_static","_static_responders","push","forEach","active_scope","respond","get_DialogueArchive","channel","static_content","then","transmission","pave","LastDynamicTime","Static","log","delay","announce","indexOf","get_AnnouncementArchive","listen","callback","subcribed_namespace","get_GlobalNamespace","subscribe","test_callback","action_callback","count","current_count","wait","wait_set","wait_Some","local_namespace","_controller_local_namespace","create_LocalNamespace","keys","_local_controllers","global_namespace","add_Controller_ToGlobalNamespaces","Local","_global_namespaces","list","length","Error","e","default","a","u","Parent","with","M_Namespace","M_State","initialize_State","set_Key","set_ResolutionInstruction","get_State","set_Var","get_Var","is_ResolutionInstruction","get_Key","JSON","stringify","C_Resolver","E_IllegalRi","subs","extract_ExpressionTrail","set_ExpressionTrail","extract_ArgumentPool","set_ArgumentPool","E_ETEmpty","produce_set_ExpressionStack_FromExpressionTrail","produce_ExpressionTrail_FromStack","EXPRESSION_SEPARATOR","produce_ExpressionStack_FromTrail","set_ExpressionStack","split","produce_ResolutionDepth_FromInstruction","ARG_OFFSET","slice","extract_Arguments","replace","RegExp","parse","get_ExpressionStack","get_ArgumentPool","Last","First","map","During","splice","extract_ExpressionType","e_expressionType","Key","extract_MethodName","INSTANTIATION_INDICATOR","Instantiate","METHOD_INDICATOR","Method","extender_class","reduce","produce_ClassExpression","getOwnPropertyNames","getOwnPropertyDescriptor","_global_namespace","C_Namespace","produce_Stack","check_NamespaceInput","_local_namespace","get_LocalNamespace","E_NoEmpty","NamespaceSeparator","_channel","_id","Math","random","toString","_states","throw_OverloadError","C_State","E_VarNotDefined","entries","set_Separators","Separator","Directory","Expression","Id","Dialogue","Monologue","Namespace","Extension","SEPARATOR","is_empty","_tracking_enabled","get_Channel","Channel","get_Id","Variable","Value","copy_Var","_track_stack","E_TrackingOff","filter","e_filterMode","And","find","Or","assign_Property","E_PropertyRequired","assign_Class","E_ChOverload","Array","isArray","get_Vars","State","_state","set_Vars","remove_State","Function","window","pop","is_Object","has_Function","String","toProperCase","charAt","toUpperCase","substr","toLowerCase","minify","chop","match","RulesVarName","E_NonPotentAttempt","E_NonStringType","E_DoesNotCarry","E_DepthInconsistent","E_TooDeep","E_TooShallow","E_MinTrailDepthLimit","DISABLED_PHRASE","DoesNotCarry","E_ArgHolderNonexist","Null","Other","Undefined","VariableType","ResolutionInstruction","e_typeDefinition","Resolver","MinTrailDepth","MaxTrailDepth","Recursion","set_Resolution","set_Passage","is_DisabledPassage","get_MaxResolutionDepth","get_MinResolutionDepth","produce_ResolutionDepth","get_EntryPoint","build_Items","check_ItemType","build_Resolution","build_Array","build_Object","constructor","check_ResolutionDepth","get_Sources","retrieve_ResolutionRules","produce_ExecutionStepStack","check_ExpressionAvailability","build_Arguments","every","set_Separators_FromGlobal","global","separators","_SEPARATOR","separator_name","M_Controller","M_ControllerEvents","controller_scope","_announcement_archive","_dialogue_archive","_controller_scope","_event_emitter","_monologue_emitter","setMaxListeners","_dialogue_emitter","sender_namespace","service_id","create_RandomServiceId","request_channel","response_channel","request_packet","Sender","Group","Recipient","Talk","Scope","reject","once","response_packet","archive_Dialogue","emit","responder_namespace","listen_channel","on","requested_return_content","serve_packet","Content","catch","error","Meta","Elapsed","Request","Response","eventNames","expression_trail","announcement_channel","announcement_packet","do_announcement","archive_Announcement","parseInt","setTimeout","waiter_namespace","total_count","resolve2","once_callback_function","new_promise","all","wait_event","Listen","Test","Call","g","_controller","has_LocalNamespace","set_LocalNamespace","subscription_list","_subscriptions","dependencies_list","_dependencies","reception_list","_receptions","_announcements","reception","services_list","_services","sequential_startup","set_Controller","get_Controller","register_Dependencies","register_Subscriptions","announce_ToAllServices","register_Announcements","register_Services","subscription","dependency","Members","data","announcement","service","sequence_steps","manager_namespace","step_promise_stack","steps_promise_sequence","step","index","produce_PromiseStackMember","produce_StepsPromise","resolve_step_promise","List","start_message","step_talk","index_str","active_step_promise_stack","resolution_instruction","library_source_namespace"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nimport {\r\n    i_map,\r\n    t_epoch\r\n} from \"./t_controller\";\r\nimport {\r\n    t_ri,\r\n} from \"@utkusarioglu/resolver\";\r\n\r\n\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tGLOBALS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nconst RI: \"RI\" = \"RI\";\r\n\r\n\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nexport const C_Controller: i_map<string> = {\r\n\r\n    /** Namespace to use when a controller wants to talk to all services */\r\n    AllServices: \"App\",\r\n\r\n    /** The duration that is allowed to pass between sequence events. can\r\n     * be removed later on*/\r\n    // @ts-ignore\r\n    GraceTime: 20,\r\n\r\n    E_AlreadyDefined: \"Controller already defined\",\r\n    E_CalledBeforeDeclaration: \"Controller called before declaration\",\r\n    E_NoScopeSelected: [\"There is a problem with the scopes. \",\r\n        \"It may be due to undefiend LocalNamespace \",\r\n        \"if the code is expected to work in local scope\"].join(\"\"),\r\n    E_MultipleRequestsBeforeResponse: \"Multiple requests for the content was placed before the promise was resolved\",\r\n    E_ForcedDynamic: \"All services are forced to be dynamic\",\r\n    E_ActiveStepMemberCount: \"Active step requires %0 members\",\r\n};\r\n\r\nexport const C_BootState: i_map<t_ri> = {\r\n\r\n    /** Class ready t_methodTrail for controller methods to emit/receive */\r\n    ClassReady: [RI, \"class_ready\"],\r\n\r\n    /** Listen ready t_methodTrail for controller methods to emit/receive */\r\n    ListenReady: [RI, \"listen_ready\"],\r\n\r\n    /** Talk ready t_methodTrail for controller methods to emit/receive */\r\n    TalkReady: [RI, \"talk_ready\"],\r\n\r\n    /** Fires when all modules load its content to the respective classes*/\r\n    ModulesReady: [RI, \"modules_ready\"],\r\n\r\n    /** Fires when the node has received all the dependency related service \r\n     * requests and completely ready for providing service for others\r\n     */\r\n    DependencyReady: [RI, \"dependency_ready\"],\r\n\r\n    /** Operation ready t_methodTrail for controller methods to emit/receive */\r\n    ServerReady: [RI, \"server_ready\"],\r\n\r\n    /** Test ready t_methodTrail for controller methods to emit/receive */\r\n    TestReady: [RI, \"test_ready\"],\r\n\r\n    ModuleInstalled: [RI, \"module_installed\"],\r\n\r\n    LibraryAdded: [RI, \"LibraryAdded\"],\r\n};\r\n\r\nexport const C_StartupTalk: i_map<t_ri> = {\r\n\r\n    /** t_methodTrail for controller manager node to emit for the start of listen\r\n    * methods by all active nodes*/\r\n    run_Listen: [RI, \"run_listen\"],\r\n\r\n    /** t_methodTrail for controller manager node to emit for the start of talk by\r\n     * all active nodes */\r\n    run_Talk: [RI, \"run_talk\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Requests: [RI, \"run_requests\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Modules: [RI, \"run_modules\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Server: [RI, \"run_server\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Tests: [RI, \"run_tests\"],\r\n\r\n    /** Declares other services to send their libraries that are targeted to the sender*/\r\n    send_Archive: [RI, \"send_Archive\"],\r\n\r\n    /** Talk from the library holder to the service that is expecting libraries */\r\n    add_Archive: [RI, \"add_Archive()\"],\r\n    \r\n};\r\n\r\n\r\n","/*\r\n *\tLOCAL CLASSES\r\n */\r\nimport { BaseController } from \"../BaseController/base_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_ri0,\r\n    t_ri,\r\n} from \"@utkusarioglu/resolver\";\r\n\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\nimport { t_ri_any } from \"@utkusarioglu/resolver/Common/t_resolver\";\r\n\r\n\r\n/*\r\n * ========================================================================== Boundary 1 =========\r\n *\r\n *\tSTAND INS\r\n *\r\n * ===============================================================================================\r\n */\r\n\r\n/**\r\n * Number used as unix epoch\r\n */\r\nexport type t_epoch = number;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n *\tSCOPE\r\n */\r\n\r\n/**\r\n * Legal scopes for the controller\r\n * \r\n * Local only emits to local namespace (if defined)\r\n * Global emits to global namespace\r\n * LocalAndGlobal emits to both\r\n */\r\nexport enum e_Scope {\r\n    Local = 1,\r\n    Global = 10,\r\n    LocalAndGlobal = 11,\r\n}\r\n\r\n/**\r\n * All legal values of e_Scope\r\n */\r\nexport type t_scope = e_Scope;\r\n\r\n/**\r\n * Only single scope allowed\r\n */\r\nexport type t_singleScope = e_Scope.Local | e_Scope.Global;\r\n\r\n\r\n\r\n/**\r\n * Contains specifications for the transmission error\r\n */\r\nexport interface i_error {\r\n    // TODO\r\n}\r\n\r\n\r\n/**\r\n * Alias for string to denote channel\r\n */\r\nexport type t_channel = string;\r\n\r\n/**\r\n * Alias for string to denote the unique service id\r\n */\r\nexport type t_serviceId = string;\r\n\r\n/**\r\n * Stores specifications required for the wait method to run\r\n */\r\nexport interface i_waitSet<TalkArgs, Return> {\r\n    /** Namespace of the target that is being waited*/\r\n    Namespace: t_namespace;\r\n    /** the resolution to listen to */\r\n    Listen: t_ri;\r\n    /** callback function to determine if the emit from the awaited meets the requirements*/\r\n    Test?: t_waitTestCallback<TalkArgs>;\r\n    /** callback to be executed once the awaited passes the test*/\r\n    Call?: t_waitPromiseResponse<TalkArgs, Return>;\r\n}\r\n\r\n/**\r\n * Alias for any to denote the content transmitted via t_transmission\r\n */\r\nexport type t_transmissionContent = any;\r\n\r\n\r\n/**\r\n * Datatype for instructing multiple waits followed by a call\r\n */\r\nexport interface i_dependency_group<TalkArgs, Return> {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_singleScope;\r\n    /** Dependency members to be waited*/\r\n    Members: i_waitSet<TalkArgs, Return>[];\r\n    /** Callback function to be executed once all the dependencies become available*/\r\n    Call: (value: any) => Promise<any>;\r\n}\r\n\r\n/**\r\n * Datatype for instructing monitor of a channel\r\n */\r\nexport interface i_subscription {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** The namespace that is being subscribed to*/\r\n    Namespace: t_namespace;\r\n    /** Resolution that is being subscribed at */\r\n    Listen: t_ri;\r\n    /** Callback function to be executed when the subscription emits*/\r\n    Call: (value: any) => any;\r\n}\r\n\r\n/**\r\n * Datatype for instructing monitor of a channel followed by a call whose \r\n * return is emitted to the requester\r\n */\r\nexport interface i_service {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace that is expected to respond to the request*/\r\n    Namespace: t_namespace;\r\n    /** Specific method that is being requested*/\r\n    Listen: t_ri;\r\n    /** Callback function to be executed on the response transmission*/\r\n    Call: (value: any) => any;\r\n    /** Whelther the service is static */\r\n    Static?: boolean;\r\n    /** Service group */\r\n    Group: e_ServiceGroup;\r\n}\r\n\r\n/**\r\n * Datatype for announcing a listening channel to which multiple clases can independently \r\n * send data towards, which will independently handled by the call function\r\n */\r\nexport interface i_reception {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace that is accepting the admissions */\r\n    Namespace?: t_namespace;\r\n    /** Announcement resolution */\r\n    Talk: t_ri;\r\n    /** Listening resolution */\r\n    Listen: t_ri;\r\n    /** function that will be called when another node emits to the channel (namespace + . + method) */\r\n    Call: (value: any) => any;\r\n}\r\n\r\n/**\r\n * Datatype for instructing emit of data to a certain channel without any \r\n * following listening activity by the emitter\r\n */\r\nexport interface i_announcement {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace of the announcer*/\r\n    Namespace: t_namespace;\r\n    /** the resolution that will be processed by the target */\r\n    Talk: any;\r\n}\r\n\r\nexport enum e_ServiceGroup {\r\n    Standard,\r\n}\r\n\r\n/**\r\n * Data structure for Controller class static content archive\r\n */\r\nexport interface i_staticContentArchive {\r\n    [channel: string]: {\r\n        [unique_request_code: string]: i_response<any>,\r\n    };\r\n}\r\n\r\n/**\r\n * Stores local controllers\r\n */\r\nexport interface i_localControllerStack {\r\n    [namespace: string]: BaseController;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Defines the properties necessary for executing one step\r\n */\r\nexport interface i_sequenceStep {\r\n    /** Console mesage for the start of the step if enabled */\r\n    StartMessage?: string;\r\n    /** Console mesage for the end of the step if enabled */\r\n    EndMessage?: string;\r\n    /** Instruction to be listened to for determining the services' completion of the step */\r\n    Listen: t_ri;\r\n    /** List of namespaces that are required to complete the step */\r\n    List: t_namespace[];\r\n    /** Instruction to announce to listening services that the step execution is shall \r\n     * be carried out. Some steps may not require a talk as the execution starts through \r\n     * some other method */\r\n    Talk?: t_ri;\r\n}\r\n\r\n/**\r\n * Generic mapping object for Controller\r\n */\r\nexport interface i_map<T> { [key: string]: T; }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Contains keys that are expected to be transmitted by controller methods\r\n */\r\ninterface i_transmission {\r\n\r\n    /** namespace of the sender*/\r\n    Sender: t_namespace;\r\n\r\n    /** namespace of the recipient*/\r\n    Recipient: t_namespace;\r\n\r\n    /** Redundant info for ease of access, concatenating:\r\n     * 1- recipient namespace  \r\n     * 2- method or announcement separator (whichever applies)\r\n     * 3- service group\r\n     * 4- id separator (if applies)\r\n     * 5- id (if applies)\r\n     */\r\n    Channel: t_channel;\r\n\r\n    /** Error content if an error occured*/\r\n    Error?: i_error;\r\n\r\n    /** epoch when the transmission occured */\r\n    Time: t_epoch;\r\n\r\n    Scope: e_Scope;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Sub set of t_transmission for talk event\r\n */\r\nexport interface i_talk<TalkRi> extends i_transmission {\r\n    /** Talking that is involved with the transmission*/\r\n    Talk: TalkRi;\r\n}\r\n\r\n/**\r\n * Extends t_transmission for response event \r\n */\r\nexport interface i_response<Content> extends i_transmission {\r\n    /** denotes the service group in service transmissions */\r\n    Group: e_ServiceGroup;\r\n    /** Talking that is involved with the transmission*/\r\n    Talk: t_ri_any;\r\n    /** transmission content that is created by the responder */\r\n    Content: Content;\r\n    /** Unique request code*/\r\n    Id: t_serviceId;\r\n    Static: boolean;\r\n    LastDynamicTime?: t_epoch;\r\n}\r\n\r\nexport interface i_request extends i_transmission {\r\n    Group: e_ServiceGroup,\r\n    Talk: t_ri_any,\r\n    Id: t_serviceId,\r\n    Static: boolean,\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport interface i_announcementPacket<TalkRi> {\r\n    Channel: t_channel,\r\n    Sender: t_namespace,\r\n    Recipient: t_namespace,\r\n    Talk: TalkRi,\r\n    Time: t_epoch,\r\n    Static: boolean,\r\n    Scope: e_Scope,\r\n}\r\n\r\n/**\r\n * Interface for all event emitters that controller uses\r\n */\r\nexport interface i_EventEmitter {\r\n    new(): this\r\n    once(channel: t_channel, response: any): void\r\n    on(channel: t_channel, packet: any): void\r\n    emit(channel: t_channel, packet: any): void\r\n    eventNames(): Array<any>;\r\n    setMaxListeners(listener_count: number): this\r\n}\r\n\r\n/**\r\n * Dialogue archive item structure\r\n */\r\nexport interface i_dialogueArchiveItem {\r\n    Meta: {\r\n        Elapsed: t_epoch,\r\n        State: \"Fail\" | \"Success\",\r\n    },\r\n    Request: i_request,\r\n    Response: i_response<any>,\r\n}\r\n\r\n/**\r\n * Annoucement archive item structure\r\n */\r\nexport interface i_announcementArchiveItem {\r\n    Namespace: t_namespace,\r\n    Channel: t_channel,\r\n    Content: any,\r\n    Time: t_epoch,\r\n}\r\n\r\n/**\r\n * Alias for wait action callback\r\n */\r\nexport type t_waitActionCallback<TalkArgs, Return = i_talk<TalkArgs>> =\r\n    (transmission: i_talk<TalkArgs>) => i_talk<TalkArgs> | Return;\r\n\r\n/**\r\n * Alias for wait test callback\r\n */\r\nexport type t_waitTestCallback<TalkArgs> = (transmission: i_talk<TalkArgs>) => boolean\r\n\r\n/**\r\n * Alias for wait promise resolve\r\n */\r\nexport type t_waitPromiseResponse<TalkArgs, Return> =\r\n    (reason: t_wait<TalkArgs, Return> | Promise<t_wait<TalkArgs, Return>>) => t_wait<TalkArgs, Return>\r\n\r\nexport type t_wait<TalkArgs, Return> = i_talk<TalkArgs> | Return;","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { Resolution, t_ri0 } from \"@utkusarioglu/resolver\";\r\n\r\n/*\r\n *\tLOCAL CLASSES\r\n */\r\nimport { BaseController } from \"../BaseController/base_controller\";\r\nimport { SeparatorHandler } from \"../Common/separator_handler\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_ri,\r\n    t_instructionCode,\r\n} from \"@utkusarioglu/resolver\";\r\nimport {\r\n    t_scope,\r\n    t_singleScope,\r\n    i_waitSet,\r\n    e_ServiceGroup,\r\n    i_staticContentArchive,\r\n    e_Scope,\r\n    i_localControllerStack,\r\n    t_channel,\r\n    t_epoch,\r\n    i_talk,\r\n    i_request,\r\n    i_response,\r\n    i_EventEmitter,\r\n    t_waitActionCallback,\r\n    t_waitTestCallback,\n    t_wait,\n} from \"../Common/t_controller\";\r\nimport { i_map } from \"@utkusarioglu/state/t_state\"; // This should be removed\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\nimport { t_ri_any } from \"@utkusarioglu/resolver/Common/t_resolver\";\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/**\r\n * Establishes local and global event emitters,\r\n * Stores the history of exchanges\r\n *\r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport class Controller extends SeparatorHandler {\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /**\r\n     * Stores the event emitter for Basecontroller\r\n     */\r\n    private static _event_emitter_class: i_EventEmitter;\r\n\r\n    /** \r\n     *  Provides BaseController functionality for global scope\r\n     */\r\n    private static _global_controller: BaseController;\r\n\r\n    /** \r\n     *  Provides BaseContoller functionality for local scopes\r\n     */\r\n    private static _local_controllers: i_localControllerStack = {};\r\n\r\n    /** \r\n     *  List of registered classes\r\n     */\r\n    private static _global_namespaces: t_namespace[] = [];\r\n\r\n    /** \r\n     *  Global namespace for this controller instance\r\n     */\r\n    private _controller_global_namespace!: t_namespace;\r\n\r\n    /** \r\n     *  Local namespace for this controller instance\r\n     */\r\n    private _controller_local_namespace!: t_namespace;\r\n\r\n    /** \r\n     *  Holds the static content for every responder \r\n     */\r\n    private static _static_content_archive: i_staticContentArchive = {};\r\n\r\n    /** \r\n     *  Channels that respond statically \r\n     */\r\n    private static _static_responders: t_namespace[] = [];\r\n\r\n    /** \r\n     *  Boolean that states whether the static content archive \r\n     *  will be ignored \r\n     */\r\n    private static _forced_dynamic_service: boolean = false;\r\n\r\n\r\n    /**\r\n     * Establishes local and global event emitters,\r\n     * Stores the history of exchanges\r\n     * \r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    constructor(namespace: t_namespace) {\r\n        super();\r\n        this.set_GlobalNamespace(namespace);\r\n        this.set_GlobalController();\r\n    }\r\n\r\n    /**\r\n     * Removes all the previously defined global controllers\r\n     * \r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static flush_GlobalController(): void {\r\n        Controller._global_controller = new BaseController(\r\n            e_Scope.Global,\r\n            this.get_EventEmitter()\r\n        );\r\n        Controller.flush_GlobalNamespaces();\r\n    }\r\n\r\n    /**\r\n     * Sets global controller if it hasn't been set\r\n     */\r\n    private set_GlobalController(): this {\r\n        if (Controller._global_controller === undefined) {\r\n            Controller._global_controller = new BaseController(\r\n                e_Scope.Global,\r\n                this.get_EventEmitter()\r\n            );\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /**\r\n     * Sets the event emitter class to be used with controller\r\n     * default is nodeJs event emitter\r\n     * \r\n     * @param event_emitter\r\n     */\r\n    public static set_EventEmitter(event_emitter: any): void {\r\n        Controller._event_emitter_class = event_emitter;\r\n    }\r\n\r\n    /**\r\n     * Returns the event emitter - Static\r\n     */\r\n    public static get_EventEmitter(): i_EventEmitter {\r\n        return Controller._event_emitter_class;\r\n    }\r\n\r\n    /**\r\n     * Returns the event emitter - NonStatic\r\n     */\r\n    public get_EventEmitter(): i_EventEmitter {\r\n        return Controller._event_emitter_class;\r\n    }\r\n\r\n/*\r\n * ======================================================= Boundary 2 =========\r\n *\r\n *\tDIALOGUE\r\n *\t\r\n *\tRequest and Respond functions together form the \"service\" feature.\r\n *\t{@link A_Controller} class introduces include_Services method for \r\n *\tregistering responses\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREQUEST\r\n */\r\n\r\n    /**\r\n     * Requests data from a certain channel, expects a .then response\r\n     * If the responding channel is registered the group as static, static \r\n     * response will be served\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param responding_namespace t_namespace for the recipient\r\n     * @param talk t_resolution that will be processed by the responding class\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public request<Content = any>(\r\n        responding_namespace: t_namespace,\r\n        talk: t_ri_any,\r\n        scope: t_singleScope = e_Scope.Global,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): Promise<i_response<Content>> {\r\n\r\n        const responding_channel =\r\n            responding_namespace +\r\n            this.get_Separator(\"Dialogue\") + group;\r\n\r\n        const instruction_code =\r\n            Resolution.produce_UniqueInstructionCode(talk);\r\n\r\n        if (Controller.is_StaticResponder(responding_channel) &&\r\n            !Controller._forced_dynamic_service) {\r\n\r\n            return Controller._static_content_archive.sniff(\r\n                [\r\n                    responding_channel,\r\n                    instruction_code,\r\n                ],\r\n                () => {\r\n\r\n                    const dynamic_transmission =\r\n                        this.request_DynamicTransmission(\r\n                            responding_namespace,\r\n                            talk,\r\n                            scope,\r\n                            group,\r\n                        );\r\n\r\n                    Controller.set_PromisifiedStaticContent(\r\n                        responding_channel,\r\n                        instruction_code,\r\n                        dynamic_transmission,\r\n                    ); \r\n\r\n                    return dynamic_transmission;\r\n                },\r\n                (static_transmisson: i_response<Content>) => {\r\n\r\n                    console.warn(\"Serving static content\");\r\n\r\n                    static_transmisson.Time = (new Date()).getTime();\r\n                    return Promise.resolve(static_transmisson);\r\n                },\r\n            ); // sniff\r\n\r\n        } else {\r\n\r\n            return this.request_DynamicTransmission<Content>(\r\n                responding_namespace,\r\n                talk,\r\n                scope,\r\n                group,\r\n            );\r\n\r\n        } // if is_static_responder\r\n    }\r\n\r\n    /**\r\n     * Requests dynamic transmission from related scopes\r\n     * \r\n     * @param scope\r\n     * @param recipient_namespace\r\n     * @param talk\r\n     * @param group\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private request_DynamicTransmission<Content = any>(\r\n        recipient_namespace: t_namespace,\r\n        talk: t_ri_any,\r\n        scope: t_singleScope = e_Scope.Global,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): Promise<i_response<Content>> {\r\n        return this\r\n            .get_Scopes(scope)[0]\r\n            .request(\r\n                this._controller_global_namespace,\r\n                recipient_namespace,\r\n                talk,\r\n                scope,\r\n                group,\r\n            );\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tRESPOND\r\n */\r\n\r\n    /**\r\n     * Responds to controller requests\r\n     * {@link A_Controller} class introduces include_Services method for \r\n     * registering responses\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param response_callback (t_transmission) => Promise that will process the \r\n     * request\r\n     * @param is_static: if true, the created response will be saved for the \r\n     * controller for \r\n     * speedy re-response in future requests, if false, the response callback \r\n     * will be called \r\n     * everytime the same request is made\r\n     * @param group defines the set of methods that is available for the \r\n     * response. Used for responding to differing security clearances\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public respond<Content = any>(\r\n        response_callback: (transmission: i_request) => Promise<Content>,\r\n        is_static: boolean = true,\r\n        scope: t_scope = e_Scope.Global,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): this {\r\n\r\n        if (is_static) {\r\n            Controller._static_responders.push(\r\n                this._controller_global_namespace + \r\n                this.get_Separator(\"Dialogue\") + \r\n                group,\r\n            );\r\n        }\r\n\r\n        this.get_Scopes(scope).forEach((active_scope: BaseController) => {\r\n            active_scope.respond(\r\n                this._controller_global_namespace,\r\n                response_callback,\r\n                scope,\r\n                group,\r\n            );\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tDOCUMENT and REPORT for DIALOGUE\r\n */ \r\n\r\n    /**\r\n     * Returns the entire history of dialogues since the App run\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_DialogueArchive(scope: t_singleScope): object {\r\n        return this.get_Scopes(scope)[0].get_DialogueArchive();\r\n    }\r\n\r\n    /**\r\n     * Returns all the channels that are being served\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    // public get_ServedChannels(scope: t_singleScope): (string | symbol)[] {\r\n    //    return this.get_Scopes(scope)[0].get_ServedChannels();\r\n    // }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE STATIC SERVICE\r\n */\r\n\r\n    /**\r\n     * Resolves the transmission promise, corrects the time of the transmission\r\n     * Saves the content as static for the given channel and code\r\n     * Warning: content served will remain to be dynamic until the promise \r\n     * is resolved\r\n     * \r\n     * @param channel\r\n     * @param instruction_code\r\n     * @param static_content\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static set_PromisifiedStaticContent(\r\n        channel: t_channel,\r\n        instruction_code: t_instructionCode,\r\n        static_content: Promise<i_response<any>>,\r\n    ): void {\r\n        static_content\r\n            .then((transmission: i_response<any>) => {\r\n\r\n                Controller._static_content_archive.pave(\r\n                    [\r\n                        channel,\r\n                        instruction_code,\r\n                    ],\r\n                    () => {\r\n                        console.warn(\r\n                            C_Controller.E_MultipleRequestsBeforeResponse,\r\n                        );\r\n                    },\r\n                    () => {\r\n\r\n                        transmission.LastDynamicTime = transmission.Time;\r\n                        transmission.Time = 0;\r\n                        transmission.Static = true;\r\n\r\n                        return transmission;\r\n                    },\r\n                );\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns all channels that registered static service\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_AllStaticChannels(): t_namespace[] {\r\n        return Controller._static_responders;\r\n    }\r\n\r\n    /**\r\n     * Returns all the static content that is currently archived\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_AllStaticContent(): i_staticContentArchive {\r\n        return Controller._static_content_archive;\r\n    }\r\n\r\n    /**\r\n     * Clears the static content archive, forcing re-build\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static flush_StaticContentArchive(): void {\r\n        Controller._static_content_archive = {};\r\n    }\r\n\r\n    /**\r\n     * Forces all services to remain dynamic despit what the service \r\n     * provider intends\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static force_AllDynamicService(): void {\r\n        console.log(C_Controller.E_ForcedDynamic);\r\n        Controller._forced_dynamic_service = true;\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 2 =========\r\n *\r\n *\tMONOLOGUE\r\n *\t\r\n *\tThese methods emit or listen to a certain channel but they do not expect \r\n *\tthe other side to take any kind of action.\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   TALK\r\n *   \r\n *   These emit locally or globally\r\n */\r\n\r\n    /**\r\n     * Declares to a channel and doesnt expect a response\r\n     * \r\n     * @param scope specifies local and/or global scope\r\n     * @param recipient_namespace the namespace that is the primary target for \r\n     * the announcement\r\n     * @param talk the talk resolution for the announcement\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public announce<TalkRi extends t_ri_any>(\r\n        recipient_namespace: t_namespace,\r\n        talk: TalkRi,\r\n        scope: t_scope = e_Scope.Global,\r\n        delay: boolean | t_epoch = false,\r\n    ): this {\r\n        this.get_Scopes(scope)\r\n            .forEach((active_scope: BaseController) => {\r\n                active_scope.announce(\r\n                    this._controller_global_namespace,\r\n                    recipient_namespace,\r\n                    talk,\r\n                    scope as t_singleScope,\r\n                    delay,\r\n                );\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tDOCUMENT and REPORT for TALK\r\n */\r\n\r\n    /**\r\n     * Returns true if the specified channel is registered as a static \r\n     * responder\r\n     * \r\n     * @param channel\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static is_StaticResponder(channel: t_channel): boolean {\r\n        return this._static_responders.indexOf(channel) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Returns the entire list of announcements since app start\r\n     */\r\n    public get_AnnouncementArchive(scope: t_singleScope): object[] {\r\n        return this.get_Scopes(scope)[0].get_AnnouncementArchive();\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tLISTEN\r\n *\t\r\n *\tThese listen globally or locally\r\n */\r\n\r\n    /**\r\n     * Listens during the run of the app, it may take internal action \r\n     * but the emitter talker will not be notified of this\r\n     * \r\n     * @param scope specifies local and/or global scope\r\n     * @param subcribed_namespace t_namespace that will be monitored\r\n     * @param listen t_resolutionNoArgs that will be monitored\r\n     * @param callback: (t_transmission) => void action to take when there \r\n     * is chatter\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public subscribe<TalkRi = any>(\r\n        listen: t_ri,\r\n        callback: (transmission: i_talk<TalkRi>) => void,\r\n        subcribed_namespace: t_namespace = this.get_GlobalNamespace(),\r\n        scope: t_scope = e_Scope.Global,\r\n    ): this {\r\n\r\n        this.get_Scopes(scope).forEach((active_scope: BaseController) => {\r\n            active_scope.subscribe(\r\n                listen,\r\n                callback,\r\n                subcribed_namespace,\r\n                scope as t_singleScope,\r\n            );\r\n        });\r\n\r\n        return this;\r\n    }\r\n     \r\n    /**\r\n     * \r\n     * Similar to subscribe, listens to a specific channel but does not \r\n     * respond to the source, Unlike subscribe, wait quits listening after \r\n     * a certain number of occurences of the channel, default = 1\r\n     * \r\n     * @param scope Local or global\r\n     * @oaram recipient_namespace t_namespace that will be monitored\r\n     * @param listen t_resolutionNoArgs used for monitoring\r\n     * @param test_callback callback for determining whether the channel \r\n     * signal meets the wait criteria\r\n     * @param action_callback: callback to execute if the test callbak \r\n     * returns true\r\n     * @param count number of times wait function will wait for the test \r\n     * callback to return true\r\n     * @param current_count current iteration count of the wait\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public wait<\r\n        TalkArgs = any,\r\n        Return = i_talk<TalkArgs>\r\n    >(\r\n        recipient_namespace: t_namespace,\r\n        listen: t_ri,\r\n        test_callback: t_waitTestCallback<TalkArgs> = () => true,\r\n        action_callback: t_waitActionCallback<TalkArgs, Return> =\r\n            (transmission) => transmission,\r\n        scope: t_singleScope = e_Scope.Global,\r\n        count: number = 1,\r\n        current_count: number = count,\r\n    ): Promise<t_wait<TalkArgs, Return>> {\r\n        const wait_response = this.get_Scopes(scope)[0].wait(\r\n            this._controller_global_namespace,\r\n            recipient_namespace,\r\n            listen,\r\n            test_callback,\r\n            action_callback,\r\n            scope,\r\n            count,\r\n            current_count,\r\n        );\r\n\r\n        return wait_response;\r\n    }\r\n\r\n    /**\r\n     * Waits multiple conditions and returns promise when all of them are met\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param wait_set: instructions for the wait conditions\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public wait_Some<\r\n        TalkArgs = any,\r\n        Return = i_talk<TalkArgs>\r\n    >(\r\n        wait_set: Array<i_waitSet<TalkArgs, Return>>,\r\n        scope: t_singleScope,\r\n    ): Promise<Array<t_wait<TalkArgs, Return>>> {\r\n        return this\r\n            .get_Scopes(scope)[0]\r\n            .wait_Some(\r\n                scope,\r\n                this._controller_global_namespace,\r\n                wait_set,\r\n            );\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 2 =========\r\n *\r\n *\tHANDLE\r\n *\t\r\n *\tGetters, Setters, Checkers and Manipulators\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE NAMESPACE\r\n *\t\r\n *\tMethods involved with getting and setting global and local namespaces \r\n *\tfor the instance\r\n */\r\n\r\n    /**\r\n     * Sets the namespace used for listening and emitting to local\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public set_LocalNamespace(local_namespace: t_namespace): this {\r\n        this._controller_local_namespace = local_namespace;\r\n        this.create_LocalNamespace(local_namespace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the local namespace that the class emits and listens to\r\n     */\r\n    public get_LocalNamespace(): t_namespace {\r\n        return this._controller_local_namespace;\r\n    }\r\n\r\n    /**\r\n     * Gets the entire list of registered local namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_LocalNamespaces(): t_namespace[] {\r\n        return Object.keys(Controller._local_controllers);\r\n        // return Controller._namespaces;\r\n    }\r\n\r\n    /**\r\n     * Sets the global namespace for this instance\r\n     * \r\n     * @param global_namespace as t_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public set_GlobalNamespace(global_namespace: t_namespace): this {\r\n        this._controller_global_namespace = global_namespace;\r\n        this.add_Controller_ToGlobalNamespaces(global_namespace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the namespace that the class is registered as\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_GlobalNamespace(): t_namespace {\r\n        return this._controller_global_namespace;\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a local namespace with the given name\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private create_LocalNamespace(local_namespace: t_namespace): void {\r\n        Controller._local_controllers\r\n            .pave([local_namespace],\r\n                () => {\r\n                    // console.warn(`${local_namespace} already exists`)\r\n                },\r\n                () => {\r\n                    return new BaseController(\r\n                        e_Scope.Local,\r\n                        Controller.get_EventEmitter()\r\n                    );\r\n                },\r\n            );\r\n        // Controller._local_controllers[local_namespace] = \r\n    }\r\n\r\n    /**\r\n     * Deletes the local namespace\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private destroy_LocalNamespace(local_namespace: t_namespace): void {\r\n        delete Controller._local_controllers[local_namespace];\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE GLOBAL NAMESPACES\r\n */\r\n\r\n    /**\r\n     * \r\n     * @param controller_namespace\r\n     */\r\n    private add_Controller_ToGlobalNamespaces(\r\n        global_namespace: t_namespace,\r\n    ): void {\r\n        Controller._global_namespaces.push(global_namespace);\r\n    }\r\n\r\n    /**\r\n     * Returns all the controller registered global namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_GlobalNamespaces(): t_namespace[] {\r\n        return Controller._global_namespaces;\r\n    }\r\n\r\n    /**\r\n     * Clears the list of previously defined global namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static flush_GlobalNamespaces(): void {\r\n        Controller._global_namespaces = [];\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE SCOPE\r\n */\r\n\r\n    /**\r\n     * Returns an array of Basecontrollers for the given scope value\r\n     * \r\n     * @param scope: number that defines the scopes \r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private get_Scopes(scope: t_scope | t_singleScope): BaseController[] {\r\n\r\n        const list: BaseController[] = [];\r\n\r\n        if (scope & 1) {\r\n            if (this._controller_local_namespace) {\r\n                list.push(\n                    Controller\n                        ._local_controllers[this._controller_local_namespace],\n                );\n            }\r\n        }\r\n\r\n        if (scope & 2) {\r\n            list.push(Controller._global_controller);\r\n        }\r\n\r\n        if (list.length < 1) {\r\n            throw new Error(C_Controller.E_NoScopeSelected);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Returns all currently defined local controllers\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_LocalControllerStack(): i_localControllerStack {\r\n        return Controller._local_controllers;\r\n    }\r\n}\r\n\r\n\r\n\r\n","!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=6)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(1),i=r(2),o=r(3),s=r(4),a=r(5);class u extends(n.Parent().with(i.M_Namespace,o.M_State)){constructor(e,t=\"RI\"){return super(),this.set_GlobalNamespace(\"App/Common/Resolver/Resolution\"),this.initialize_State(),this.set_Key(t),this.set_ResolutionInstruction(e),this}set_Key(e){return this.get_State().set_Var(\"Key\",e),this}get_Key(){return this.get_State().get_Var(\"Key\")}set_ResolutionInstruction(e){if(!u.is_ResolutionInstruction(e,this.get_Key())){const t=JSON.stringify(e);throw new Error(s.C_Resolver.E_IllegalRi.subs(t))}this.get_State().set_Var(\"ResolutionInstruction\",e);const t=u.extract_ExpressionTrail(e);this.set_ExpressionTrail(t);const r=u.extract_ArgumentPool(e);return this.set_ArgumentPool(r),this}get_ResolutionInstruction(){return this.get_State().get_Var(\"ResolutionInstruction\")}static is_ResolutionInstruction(e,t=\"RI\"){return e[0]===t&&e.length>1}static produce_UniqueInstructionCode(e){return JSON.stringify(e)}set_ExpressionTrail(e){if(\"\"===e)throw new Error(s.C_Resolver.E_ETEmpty);return this.get_State().set_Var(\"ExpressionTrail\",e),this.produce_set_ExpressionStack_FromExpressionTrail(e),this}get_ExpressionTrail(){return this.get_State().get_Var(\"ExpressionTrail\")}produce_set_ExpressionTrail_FromStack(e){const t=u.produce_ExpressionTrail_FromStack(e);this.set_ExpressionTrail(t)}static produce_ExpressionTrail_FromStack(e){return e.join(s.C_Resolver.EXPRESSION_SEPARATOR)}static extract_ExpressionTrail(e){return e[1]}set_ExpressionStack(e){return this.get_State().set_Var(\"ExpressionStack\",e),this}get_ExpressionStack(){return this.get_State().get_Var(\"ExpressionStack\")}produce_set_ExpressionStack_FromExpressionTrail(e){const t=u.produce_ExpressionStack_FromTrail(e);this.set_ExpressionStack(t)}static produce_ExpressionStack_FromTrail(e){return e.split(s.C_Resolver.EXPRESSION_SEPARATOR)}static extract_ArgumentPool(e){const t=u.produce_ResolutionDepth_FromInstruction(e);let r=[];e.length>s.C_Resolver.ARG_OFFSET&&(r=e.slice(-e.length+s.C_Resolver.ARG_OFFSET));for(let e=r.length;e<t;e++)r.push([]);return r}set_ArgumentPool(e){this.get_State().set_Var(\"ArgumentPool\",e)}get_ArgumentPool(){return this.get_State().get_Var(\"ArgumentPool\")}static extract_Arguments(e,t=0){return u.extract_ArgumentPool(e)[t]}static subs_Arguments(e,t,r){return e[s.C_Resolver.ARG_OFFSET+t]=r,e}static extract_Argument(e,t=0,r=0){return u.extract_Arguments(e,t)[r]}static subs_ArgumentValue(e,t='\"//args//\"',r){const n=JSON.stringify(r),i=`\"${t}\"`,o=JSON.stringify(e).replace(new RegExp(i,\"g\"),n);return JSON.parse(o)}produce_ExecutionStepStack(e){let t=0,r=this.get_ExpressionStack(),n=this.get_ArgumentPool();return e.hasOwnProperty(\"Last\")&&(r=[...r,...e.Last]),e.hasOwnProperty(\"First\")&&(t+=e.First.length,r=[...e.First,...r]),e.hasOwnProperty(\"During\")&&r.map((i,o)=>{const s=o+t;if(e.During[s]){const t=e.During[s],i=r.splice(o,1,t);n.splice(o,0,i)}}),r.map((e,t)=>{const r=u.extract_ExpressionType(e);if(r!==a.e_expressionType.Key){const i=n[t]||[];return[r,u.extract_MethodName(e),i]}return[r,e]})}static extract_ExpressionType(e){return e.slice(0,4)===s.C_Resolver.INSTANTIATION_INDICATOR?a.e_expressionType.Instantiate:e.slice(-2)===s.C_Resolver.METHOD_INDICATOR?a.e_expressionType.Method:a.e_expressionType.Key}static extract_MethodName(e){return e.replace(s.C_Resolver.INSTANTIATION_INDICATOR,\"\").replace(s.C_Resolver.METHOD_INDICATOR,\"\")}static produce_ResolutionDepth(e){return e.get_ExpressionStack().length}static produce_ResolutionDepth_FromInstruction(e){const t=u.extract_ExpressionTrail(e);return u.produce_ExpressionStack_FromTrail(t).length}}t.Resolution=u},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);t.Parent=n.Parent},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Parent=e=>new n(e);class n{constructor(e){this.extender_class=e||class{}}with(...e){return e.reduce((e,t)=>n.produce_ClassExpression(t)(e),this.extender_class)}static produce_ClassExpression(e){return t=>{const r=class extends t{};return Object.getOwnPropertyNames(e.prototype).forEach(t=>{r.prototype.hasOwnProperty(t)||Object.defineProperty(r.prototype,t,Object.getOwnPropertyDescriptor(e.prototype,t))}),r}}}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);t.M_Namespace=n.M_Namespace},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(2);t.M_Namespace=class{get_GlobalNamespace(){if(!this._global_namespace)throw new Error(n.C_Namespace.E_CalledBeforeDeclaration);return this._global_namespace}get_GlobalNamespaceStack(){const e=this.get_GlobalNamespace();return this.produce_Stack(e)}set_GlobalNamespace(e){if(void 0!==this._global_namespace)throw new Error(n.C_Namespace.E_AlreadyDefined);return this.check_NamespaceInput(e),this._global_namespace=e,this}get_LocalNamespace(){if(!this._local_namespace)throw new Error(n.C_Namespace.E_CalledBeforeDeclaration);return this._local_namespace}get_LocalNamespaceStack(){const e=this.get_LocalNamespace();return this.produce_Stack(e)}set_LocalNamespace(e){if(this._local_namespace)throw new Error(n.C_Namespace.E_AlreadyDefined);this.check_NamespaceInput(e),this._local_namespace=e}has_LocalNamespace(){return void 0!==this._local_namespace&&null!==this._local_namespace}check_NamespaceInput(e){if(void 0===e||0===e.length)throw new Error(n.C_Namespace.E_NoEmpty)}produce_Stack(e){return e.split(n.C_Namespace.NamespaceSeparator)}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_Namespace={E_AlreadyDefined:\"%1 Namespace already defined\",E_CalledBeforeDeclaration:\"%1 Namespace called before declaration\",E_NoEmpty:\"%1 Namespace declaration cannot be empty\",NamespaceSeparator:\"/\"}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=2)}([function(e,t,r){\"use strict\";(function(e){Object.defineProperty(t,\"__esModule\",{value:!0}),r(5),r(6);const n=r(1),i=r(7);class o{constructor(e=\"Generic\",t=null){this._channel=e,this._id=t||Math.random().toString().slice(2),o._states.pave([this._channel,this._id],()=>{this.throw_OverloadError()},()=>({}))}get_Var(e){return o._states.sniff([this._channel,this._id],()=>{console.log(n.C_State.E_VarNotDefined.subs(this._channel,this._id))},t=>t.sniff(e,()=>{},e=>e))}set_Var(e,t){return o._states[this._channel][this._id].pave(e,()=>t,()=>t),this}copy_Var(e){const t=this.get_Var(e);return t?JSON.parse(JSON.stringify(t)):void 0}has_Var(e){return o._states[this._channel][this._id].sniff(e,()=>!1,()=>!0)}set_Vars(e){return Object.entries(e).forEach(([e,t])=>{this.set_Var(e,t)}),this}get_Vars(){return o._states[this._channel][this._id]}static get_AllStates(e=!0){if(e){let e={};return Object.entries(this._states).forEach(([t,r])=>{const n=Object.keys(r);n.length<2?e[t]=r[n[0]]:e[t]=r}),e}return o._states}get_Id(){return this._id}get_Channel(){return this._channel}set_Separators_FromGlobal(){e.hasOwnProperty(\"Separator\")?this.set_Separators(e.Separator):this.set_Separators({Directory:\"/\",Expression:\".\",Id:\"-\",Dialogue:\"?\",Monologue:\":\",Namespace:\"/\",Extension:\".\"})}set_Separators(e){o.SEPARATOR=e}remove_State(){delete o._states[this._channel][this._id],o._states[this._channel].is_empty()&&delete o._states[this._channel]}static remove_AllStates(){o._states={}}track_Variable(e,t,r=(()=>!0)){if(!o._tracking_enabled)return;const n=this.get_Channel(),i={Time:(new Date).getTime(),Channel:n,Namespace:n.split(\":\")[0].split(\"?\")[0],Id:this.get_Id(),Variable:e,Value:void 0===t?this.copy_Var(e):t};r(i)&&o._track_stack.push(i)}static track_Variable(e,t,r){if(!o._tracking_enabled)return;const n={Time:(new Date).getTime(),Channel:e,Namespace:e.split(\":\")[0].split(\"?\")[0],Id:\"-\",Variable:t,Value:r};o._track_stack.push(n)}static get_AllTrackRecords(){return o._tracking_enabled?o._track_stack:n.C_State.E_TrackingOff}static get_AllTrackedChannels(){return o._tracking_enabled?o._track_stack.map(e=>e.Channel).filter((e,t,r)=>r.indexOf(e)===t):n.C_State.E_TrackingOff}static get_AllTrackedNamespaces(){return o._tracking_enabled?o._track_stack.map(e=>e.Namespace).filter((e,t,r)=>r.indexOf(e)===t):n.C_State.E_TrackingOff}static get_SomeTrackRecords(e,t=!0,r=i.e_filterMode.And){if(!o._tracking_enabled)return n.C_State.E_TrackingOff;let s=o._track_stack.filter(t=>{const n=e.sniff(\"Time\",()=>!0,([e,r])=>(void 0===e||t.Time>=e)&&(void 0===r||t.Time<=r)),o=e.sniff(\"Channels\",()=>!0,e=>void 0!==e.find(e=>t.Channel===e)||0===e.length),s=e.sniff(\"Namespaces\",()=>!0,e=>void 0!==e.find(e=>t.Namespace===e)||0===e.length);return[n,o,e.sniff(\"Variables\",()=>!0,e=>void 0!==e.find(e=>t.Variable===e)||0===e.length),e.sniff(\"Call\",()=>!0,e=>e(t)),s].reduce((e,t)=>{switch(e=void 0===e||e,r){case i.e_filterMode.And:return e&&t;case i.e_filterMode.Or:return e||t}})});return t&&(s=s.map(e=>(delete e.Channel,delete e.Time,delete e.Id,e))),s}set_OptionalProperties(e,t){return e.forEach(e=>{this.assign_Property(e,t)}),this}set_RequiredProperties(e,t){return e.forEach(e=>{if(!this.assign_Property(e,t))throw new Error(n.C_State.E_PropertyRequired.subs(e))}),this}assign_Property(e,t){let r=e.split(o.SEPARATOR.Expression).slice(-1)[0];return t.sniff(r,()=>!1,()=>(this.set_Var(e,t[r]),!0))}set_OptionalClasses(e,t){return Object.keys(e).forEach(r=>{this.assign_Class(e,r,t)}),this}set_RequiredClasses(e,t){return Object.keys(e).forEach(r=>{if(!this.assign_Class(e,r,t))throw new Error(n.C_State.E_PropertyRequired.subs(r))}),this}throw_OverloadError(e=[\"empty\"]){throw new Error(n.C_State.E_ChOverload.subs(this._channel,this._id,JSON.stringify(e)))}assign_Class(e,t,r){let n=t.split(o.SEPARATOR.Expression),i=n.slice(-1)[0];if(r.hasOwnProperty(i)){const o=Array.isArray(r[i])?r[i]:[r[i]];return this.get_Vars().pave(n,()=>{this.throw_OverloadError(n)},()=>o.map(r=>new e[t](r))),!0}return!1}}t.State=o,o._states={},o._track_stack=[],o._tracking_enabled=!0}).call(this,r(4))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_State={E_VarNotDefined:\"Instance %0/%1 is not defined\",E_TrackingOff:\"Tracking Disabled\",E_PropertyRequired:\"Property '%0' is required\",E_ChOverload:\"Channel overload occured at: %0.%1\\n%2\",E_AlreadyDefined:\"State already defined\",E_CalledBeforeDeclaration:\"State called before declaration\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(3);t.M_State=n.M_State;var i=r(0);t.State=i.State},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(0),i=r(1);t.M_State=class{initialize_State(e){if(void 0!==this._state)throw new Error(i.C_State.E_AlreadyDefined);const t=this.get_GlobalNamespace();return this._state=new n.State(t),void 0!==e&&this._state.set_Vars(e),this}get_State(){if(!(this._state instanceof n.State))throw new Error(i.C_State.E_CalledBeforeDeclaration);return this._state}remove_State(){this._state.remove_State()}}},function(e,t){var r;r=function(){return this}();try{r=r||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(r=window)}e.exports=r},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);Object.prototype.sniff=function(e,t,r){void 0===t&&(t=function(){return!1}),void 0===r&&(r=function(){return!0});for(var i=this,o=0,s=Array.isArray(e)?e:e.split(n.Separator.Expression);o<s.length;o++){var a=s[o];if(void 0===i[a])return t(i);i=i[a]}return r(i)},Object.prototype.pave=function(e,t,r){void 0===t&&(t=function(){return Object}),void 0===r&&(r=function(){return Object});var i=Array.isArray(e)?e:e.split(n.Separator.Expression),o=i.pop(),s=this,a=function(e){if(void 0===e[o])return e[o]=r()||{},!0;var n=t();return n&&(e[o]=n),!1};if(!(i.length>0))return a(s);s.sniff(i,(function(){for(var e=0,t=i;e<t.length;e++){var r=t[e];s[r]=s[r]?s[r]:{},s=s[r]}return a(s)}),(function(e){return a(e)}))},Object.prototype.is_empty=function(){for(var e in this)if(this.hasOwnProperty(e))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(e){return\"function\"==typeof this[e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Separator={Expression:\".\"}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),String.prototype.toProperCase=function(){return this.replace(/\\w\\S*/g,e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())},String.prototype.minify=function(){return this.replace(/\\s/g,\"\")},String.prototype.chop=function(e=50){const t=new RegExp(`.{1,${e}}`,\"g\");return this.match(t)||[]},String.prototype.subs=function(...e){return e.reduce((e,t,r)=>e.replace(`%${r}`,t),this)}}]))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.And=0]=\"And\",e[e.Or=1]=\"Or\"}(t.e_filterMode||(t.e_filterMode={}))}]))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_Resolver={RulesVarName:\"RESOLUTION_RULES\",E_NonPotentAttempt:\"Attempt to enable string that isn't a disabled passage\",E_NonStringType:\"Non-string type given to enable_Passage\",E_DoesNotCarry:\"Base does not carry expression '%0'\\n\",E_DepthInconsistent:\"MinDepth cannot be larger than MaxDepth\",E_TooDeep:\"Resolution is deeper than the max allowed depth\",E_TooShallow:\"Resolution is shallower than the min allowed depth\",E_MinTrailDepthLimit:\"min trail depth cannot be smaller than 1\",DISABLED_PHRASE:\"<<DISABLED>>\",EXPRESSION_SEPARATOR:\".\",DoesNotCarry:\"Sources does not point to any expression named %0\",E_IllegalRi:\"Illegal and/or wrong key ResolutionInstruction\",E_ETEmpty:\"ExpressionTrail cannot be empty\",E_ArgHolderNonexist:\"Argument holder does not exist\\nRI:%0\\nExpression level: %1\",INSTANTIATION_INDICATOR:\"new \",METHOD_INDICATOR:\"()\",ARG_OFFSET:2}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.Instantiate=0]=\"Instantiate\",e[e.Method=1]=\"Method\",e[e.Key=2]=\"Key\"}(t.e_expressionType||(t.e_expressionType={})),function(e){e[e.Null=0]=\"Null\",e[e.Object=1]=\"Object\",e[e.Array=2]=\"Array\",e[e.Other=3]=\"Other\",e[e.Undefined=4]=\"Undefined\",e[e.VariableType=5]=\"VariableType\",e[e.Resolution=6]=\"Resolution\",e[e.ResolutionInstruction=7]=\"ResolutionInstruction\"}(t.e_typeDefinition||(t.e_typeDefinition={}))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(7);var n=r(0);t.Resolution=n.Resolution;var i=r(8);t.Resolver=i.Resolver},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);Object.prototype.sniff=function(e,t,r){void 0===t&&(t=function(){return!1}),void 0===r&&(r=function(){return!0});for(var i=this,o=0,s=Array.isArray(e)?e:e.split(n.Separator.Expression);o<s.length;o++){var a=s[o];if(void 0===i[a])return t(i);i=i[a]}return r(i)},Object.prototype.pave=function(e,t,r){void 0===t&&(t=function(){return Object}),void 0===r&&(r=function(){return Object});var i=Array.isArray(e)?e:e.split(n.Separator.Expression),o=i.pop(),s=this,a=function(e){if(void 0===e[o])return e[o]=r()||{},!0;var n=t();return n&&(e[o]=n),!1};if(!(i.length>0))return a(s);s.sniff(i,(function(){for(var e=0,t=i;e<t.length;e++){var r=t[e];s[r]=s[r]?s[r]:{},s=s[r]}return a(s)}),(function(e){return a(e)}))},Object.prototype.is_empty=function(){for(var e in this)if(this.hasOwnProperty(e))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(e){return\"function\"==typeof this[e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Separator={Expression:\".\"}}]))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(3),i=r(2),o=r(1),s=r(0),a=r(4),u=r(5),c=\"RI\";class l extends(o.Parent().with(n.M_State,i.M_Namespace)){constructor(e){super(),this.set_GlobalNamespace(e).initialize_State({MinTrailDepth:1,MaxTrailDepth:100,Recursion:!1})}get_EntryPoint(){return this.get_State().get_Var(\"EntryPoint\")}set_ExpressionTrail(e){const t=[c,e];return this.set_Resolution(new s.Resolution(t)),this}set_ExpressionStack(e){const t=[c,s.Resolution.produce_ExpressionTrail_FromStack(e)];return this.set_Resolution(new s.Resolution(t)),this}set_ResolutionInstruction(e){return this.set_Resolution(new s.Resolution(e)),this}set_Resolution(e){return this.set_Passage(e),this}set_Passage(e){return this.get_State().set_Var(\"EntryPoint\",e),this}static disable_Passage(e){return a.C_Resolver.DISABLED_PHRASE+JSON.stringify(e)}static enable_Passage(e){const t=a.C_Resolver.DISABLED_PHRASE;if(this.is_DisabledPassage(e))return JSON.parse(e.slice(t.length));throw new Error(a.C_Resolver.E_NonStringType+\"\\n\"+JSON.stringify(e))}static is_DisabledPassage(e){const t=a.C_Resolver.DISABLED_PHRASE;return\"string\"==typeof e&&e.slice(0,t.length)===t}set_Sources(e){return this.get_State().set_Var(\"Sources\",e),this}get_Sources(){return this.get_State().get_Var(\"Sources\")}set_MaxResolutionDepth(e){return this.get_State().set_Var(\"MaxTrailDepth\",e),this}get_MaxResolutionDepth(){return this.get_State().get_Var(\"MaxTrailDepth\")}set_MinResolutionDepth(e){if(e<1)throw new Error(a.C_Resolver.E_MinTrailDepthLimit);return this.get_State().set_Var(\"MinTrailDepth\",e),this}get_MinResolutionDepth(){return this.get_State().get_Var(\"MinTrailDepth\")}check_ResolutionDepth(e){const t=this.get_MaxResolutionDepth(),r=this.get_MinResolutionDepth();let n=[];if(r>t&&n.push(a.C_Resolver.E_DepthInconsistent),s.Resolution.produce_ResolutionDepth(e)>=t&&n.push(a.C_Resolver.E_TooDeep),s.Resolution.produce_ResolutionDepth(e)<r&&n.push(a.C_Resolver.E_TooShallow),0!==n.length)throw new Error(n.join(\"\\n\")+JSON.stringify(e))}set_Recursion(e){return this.get_State().set_Var(\"Recursion\",e),this}get_Recursion(){return this.get_State().get_Var(\"Recursion\")}produce_Resolute(){const e=this.get_EntryPoint(),t=this.build_Items(e);return this.remove_State(),t}build_Items(e){switch(l.check_ItemType(e)){case u.e_typeDefinition.ResolutionInstruction:e=new s.Resolution(e);case u.e_typeDefinition.Resolution:return this.build_Resolution(e);case u.e_typeDefinition.Array:return this.build_Array(e);case u.e_typeDefinition.Object:return this.build_Object(e);default:return e}}build_Array(e){return e.map(e=>this.build_Items(e))}build_Object(e){let t={};return\"Object\"!==e.constructor.name?t=e:Object.entries(e).forEach(([e,r])=>{switch(l.check_ItemType(r)){case u.e_typeDefinition.ResolutionInstruction:const n=new s.Resolution(r);t[e]=this.build_Resolution(n);break;case u.e_typeDefinition.Array:t[e]=this.build_Array(r);break;case u.e_typeDefinition.Object:t[e]=this.build_Object(r);break;default:t[e]=r}}),t}build_Resolution(e){this.check_ResolutionDepth(e);let t=this.get_Sources();const r=this.retrieve_ResolutionRules(e),n=e.produce_ExecutionStepStack(r);return n.forEach(e=>{const r=e[1],i=e[0];if(this.check_ExpressionAvailability(t,r,n),i===u.e_expressionType.Key)t=t[r];else{const n=this.build_Arguments(e[2]);t=i===u.e_expressionType.Instantiate?new t[r](...n):t[r](...n)}}),this.build_Items(t)}check_ExpressionAvailability(e,t,r){if(void 0===e[t])throw new Error(`${a.C_Resolver.DoesNotCarry.subs(t)}\\n${JSON.stringify(r)}`)}build_Arguments(e){return void 0!==e?e.map(e=>{switch(l.check_ItemType(e)){case u.e_typeDefinition.ResolutionInstruction:const t=new s.Resolution(e);return this.build_Resolution(t);case u.e_typeDefinition.Object:return this.build_Object(e);case u.e_typeDefinition.Array:return this.build_Array(e);default:return e}}):[]}static check_ItemType(e){return null===e?u.e_typeDefinition.Null:void 0===e?u.e_typeDefinition.Undefined:e instanceof s.Resolution?u.e_typeDefinition.Resolution:s.Resolution.is_ResolutionInstruction(e)?u.e_typeDefinition.ResolutionInstruction:Array.isArray(e)?u.e_typeDefinition.Array:e.is_Object()?u.e_typeDefinition.Object:u.e_typeDefinition.Other}static retrieve_ItemTypeArray(e){const t=l.check_ItemType(e[0]);return e.every(e=>t===l.check_ItemType(e))?t:u.e_typeDefinition.VariableType}retrieve_ResolutionRules(e){const t=this.get_Sources(),r=e.get_ExpressionStack()[0],n=a.C_Resolver.RulesVarName;return t.sniff([s.Resolution.extract_MethodName(r),n],()=>({}),e=>e)}}t.Resolver=l}]));\r\n//# sourceMappingURL=index.js.map","import { i_map } from \"./t_controller\";\r\n\r\n/**\r\n * Handles getting and setting of separator strings\r\n */\r\nexport abstract class SeparatorHandler {\r\n\r\n    protected static _SEPARATOR: i_map<string>;\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * ============================================================================\r\n */\r\n    /**\r\n     * Handles setting and getting of separator strings\r\n     */\r\n    constructor() {\r\n        this.set_Separators_FromGlobal();\r\n    }\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE SEPARATORS\r\n */\r\n\r\n    /**\r\n     * Imports separators if they are available globally\r\n     */\r\n    protected set_Separators_FromGlobal(): void {\r\n        if (global.hasOwnProperty(\"Separator\")) {\r\n            this.set_Separators(\r\n                // @ts-ignore\r\n                global.Separator,\r\n            );\r\n        } else {\r\n            this.set_Separators({\r\n                Directory: \"/\",\r\n                Expression: \".\",\r\n                Id: \"-\",\r\n                Dialogue: \"?\",\r\n                Monologue: \":\",\r\n                Namespace: \"/\",\r\n                Extension: \".\",\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets internal separators for Controller class\r\n     * \r\n     * @param separators\r\n     */\r\n    protected set_Separators(separators: i_map<string>): void {\r\n        SeparatorHandler._SEPARATOR = separators;\r\n    }\r\n\r\n    /**\r\n     * Returns the separator string for the specified name\r\n     * \r\n     * @param separator_name\r\n     */\r\n    protected get_Separator(separator_name: string): string {\r\n        return SeparatorHandler._SEPARATOR[separator_name];\r\n    }\r\n}\r\n","/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tEXPORTS\r\n *\r\n * ============================================================================\r\n */\r\n\r\nexport { Controller } from \"./Controller/controller\";\r\nexport { M_Controller } from \"./Mixins/m_controller\";\r\nexport { M_ControllerEvents } from \"./Mixins/m_controller_events\";\r\n\r\nexport {\r\n    C_Controller,\r\n    C_StartupTalk,\r\n    C_BootState,\r\n} from \"./Common/c_controller\";\r\n\r\nexport {\r\n    e_Scope,\r\n    i_subscription,\r\n    i_sequenceStep,\r\n    i_dependency_group,\r\n    i_service,\r\n    i_reception,\r\n    t_channel,\r\n    i_waitSet,\r\n    i_talk,\r\n    i_response\r\n} from \"./Common/t_controller\";\r\n","\r\n/*\r\n *\tCOMMON CLASSES\r\n */ \r\n//import { EventEmitter } from \"@utkusarioglu/event-emitter\";\r\nimport { Resolution, t_ri0 } from \"@utkusarioglu/resolver\";\r\nimport { SeparatorHandler } from \"../Common/separator_handler\";\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_serviceId,\r\n    i_waitSet,\r\n    e_ServiceGroup,\r\n    e_Scope,\r\n    t_singleScope,\r\n    t_channel,\r\n    t_epoch,\r\n    i_talk,\r\n    i_request,\r\n    i_EventEmitter,\r\n    i_response,\r\n    i_dialogueArchiveItem,\r\n    i_announcement,\r\n    i_announcementArchiveItem,\r\n    i_announcementPacket,\r\n    t_waitActionCallback,\r\n    t_waitTestCallback,\r\n    t_waitPromiseResponse,\r\n    t_wait,\r\n} from \"../Common/t_controller\";\r\nimport {\r\n    t_ri,\r\n    t_expressionTrail,\r\n} from \"@utkusarioglu/resolver\";\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\nimport { EventEmitter } from \"@utkusarioglu/event-emitter\";\r\nimport { t_ri_any } from \"@utkusarioglu/resolver/Common/t_resolver\";\r\n\r\n\r\n\r\n/**\r\n * Extends event emitter to include specific send and receive functions for \r\n * a single scope. Controller class introduces local and global scopes using \r\n * this class\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport class BaseController extends SeparatorHandler {\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /**\r\n     * Stores the event emitter class for the basecontroller to instasntiate\r\n     */\r\n    private _event_emitter!: i_EventEmitter;\r\n\r\n    /**\r\n     *  Event emitter for talk and listen use cases\r\n     */\r\n    private _monologue_emitter!: i_EventEmitter; // this increase may have some speed cost\r\n\r\n    /**\r\n     *  Event emitter for services\r\n     */\r\n    private _dialogue_emitter!: i_EventEmitter; // this increase may have some speed cost;\r\n\r\n    /**\r\n     *  Stores runtime announcements\r\n     */\r\n    private _announcement_archive: Array<i_announcementArchiveItem> = [];\r\n\r\n    /**\r\n     *  Stores runtime requests and responds\r\n     */\r\n    private _dialogue_archive: Array<i_dialogueArchiveItem> = [];\r\n\r\n    /**\r\n     * Scope that the basecontroller is currently working on\r\n     */\r\n    private _controller_scope: t_singleScope; // BaseController doesn't use this, but it's useful for debuging\r\n\r\n/*\r\n *\tThese will be used in future feature expansions\r\n */\r\n    // private static _static_reserve = {};\r\n    // private _open_requests: object[] = [];\r\n    // private _open_annuncements: object[] = [];\r\n    // private _open_subscriptions: object[] = [];\r\n    // private _open_waits: object[] = [];\r\n    // private _open_wait_dependencies: object[] = [];\r\n\r\n    /**\r\n     * Extends event emitter to include specific send and receive functions \r\n     * for a single scope. Controller class introduces local and global scopes \r\n     * using this class\r\n     * \r\n     * @param controller_scope\r\n     * @param event_emitter\r\n     * \r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    constructor(\r\n        controller_scope: t_singleScope,\r\n        event_emitter: any\r\n    ) {\r\n        super();\r\n        this._controller_scope = controller_scope;\r\n\r\n        this._event_emitter = event_emitter\r\n        this._monologue_emitter = new event_emitter().setMaxListeners(20);\r\n        this._dialogue_emitter = new event_emitter().setMaxListeners(20);\r\n\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDIALOGUE\r\n *\t\r\n *\t2 way data transfer between nodes\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREQUEST\r\n */\r\n\r\n    /**\r\n     * Requests data from the given channel\r\n     * \r\n     * @remarks \r\n     * this method is a part of the Controller subsystem.\r\n     * Works in tandem with  {@link BaseController.(serve:instance)}\r\n     * \r\n     * \r\n     * @param sender_namespace namespace of the requesting class\r\n     * @param recipient_namespace namespace that is intended to receive the \r\n     * request\r\n     * @param talk the resolution that the responder will process\r\n     * @param group defines the set of methods that will be used for the service\r\n     * \r\n     * @returns Requested data inside the transmission wrapper object as \r\n     * Promise<t_transmission>\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public request<Content>(\r\n        sender_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        talk: t_ri_any,\r\n        scope: e_Scope,\r\n        group: e_ServiceGroup,\r\n    ): Promise<i_response<Content>> {\r\n\r\n        const service_id: t_serviceId = BaseController.create_RandomServiceId();\r\n        const request_channel: t_channel = recipient_namespace +\r\n            this.get_Separator(\"Dialogue\") +\r\n            group;\r\n        const response_channel: t_channel = request_channel +\r\n            this.get_Separator(\"Id\") +\r\n            service_id;\r\n        const request_packet: i_request = {\r\n            Channel: response_channel,\r\n            Sender: sender_namespace,\r\n            Group: group,\r\n            Recipient: recipient_namespace,\r\n            Talk: talk,\r\n            Id: service_id,\r\n            Time: (new Date()).getTime(),\r\n            Static: false,\r\n            Scope: scope,\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._dialogue_emitter\r\n                .once((response_channel), (response_packet: i_response<Content>) => {\r\n\r\n                response_packet.sniff(\"Error\",\r\n                    resolve.bind(null, response_packet),\r\n                    reject.bind(null, response_packet),\r\n                );\r\n\r\n                this.archive_Dialogue(request_packet, response_packet);\r\n            });\r\n\r\n            this._dialogue_emitter.emit(\r\n                request_channel,\r\n                request_packet as i_request,\r\n            );\r\n        });\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tRESPOND\r\n */\r\n\r\n    /**\r\n     * Responds to controller requests\r\n     * {@link A_Controller} class introduces include_Services method for \r\n     * registering responses\r\n     *\r\n     * @param responder_namespace\r\n     * @param listen the resolution that the respond method will be \r\n     * listening to\r\n     * @param requester_namespace the namespace that is intended to receive \r\n     * the message\r\n     * @param response the callback function that will create the response \r\n     * for the request\r\n     * @param is_static if true, the created response will be saved for the \r\n     * controller for\r\n     * speedy re-response in future requests, if false, the response callback \r\n     * will be called\r\n     * everytime the same request is made\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public respond<Content>(\r\n        responder_namespace: t_namespace,\r\n        response_callback: (transmission: i_request) => Promise<Content>,\r\n        scope: e_Scope,\r\n        group: e_ServiceGroup,\r\n    ): void {\r\n\r\n        const listen_channel: t_channel =\r\n            responder_namespace +\r\n            this.get_Separator(\"Dialogue\") +\r\n            group;\r\n\r\n        this._dialogue_emitter.on(listen_channel,\r\n            (transmission: i_request) => {\r\n\r\n                response_callback(transmission)\r\n                    .then((requested_return_content: any) => { \r\n\r\n                        const serve_packet: i_response<Content> = {\r\n                            Sender: transmission.Recipient,\r\n                            Recipient: transmission.Sender,\r\n                            Talk: transmission.Talk,\r\n                            Group: group,\r\n                            Channel: transmission.Channel,\r\n                            Id: transmission.Id,\r\n                            Content: requested_return_content,\r\n                            Time: (new Date()).getTime(),\r\n                            Static: false,\r\n                            Scope: scope,\r\n                        };\r\n\r\n                        this._dialogue_emitter\r\n                            .emit(\r\n                                transmission.Channel,\r\n                                serve_packet,\r\n                            );\r\n\r\n                    }) // then\r\n                    .catch((error) => {\r\n                        // TODO\r\n                        console.log(\"serve error:\", error);\r\n                    });\r\n\r\n            }); // dialogue emitter\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   DOCUMENT and REPORT for DIALOGUE\r\n */\r\n\r\n    /**\r\n     * Archives the given dialogue data\r\n     * \r\n     * @param request_packet\r\n     * @param response_packet\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private archive_Dialogue(\r\n        request_packet: i_request,\r\n        response_packet: i_response<any>,\r\n    ): void {\r\n\r\n        this._dialogue_archive.push({\r\n            Meta: {\r\n                Elapsed: (new Date()).getTime() - request_packet.Time,\r\n                State: response_packet.hasOwnProperty(\"Error\")\r\n                    ? \"Fail\"\r\n                    : \"Success\",\r\n            },\r\n            Request: request_packet,\r\n            Response: response_packet,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a random service Id for the service channel to be unique\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private static create_RandomServiceId(): t_serviceId {\r\n        return Math.random().toString().slice(2);\r\n    }\r\n\r\n    /**\r\n     * Returns the entire history of dialogues since the App run\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public get_DialogueArchive(): Array<i_dialogueArchiveItem> {\r\n        return this._dialogue_archive;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Returns all the channels that are being served\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public publicget_ServedChannels(): any[] {\r\n        return this._dialogue_emitter.eventNames();\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tMONOLOGUE\r\n *\t\r\n *\tTransmission during which the emitter or listener do not acknowledge \r\n *\teach other\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tTALK\r\n */\r\n\r\n    /**\r\n     * Declares to a channel and doesnt expect a response\r\n     * \r\n     * @param sender_namespace namespace of the class that is making the \r\n     * announcement\r\n     * @param recipient_namespace namespace that is the main subject of the \r\n     * announcement\r\n     * @param talk the content us being transmitted\r\n     * @param scope Scope of the message. Scope does not have any part in \r\n     * emittance, \r\n     * it's required for archiving\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public announce<TalkRi extends t_ri_any>(\r\n        sender_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        talk: TalkRi,\r\n        scope: t_singleScope,\r\n        delay: boolean | t_epoch = false,\r\n    ): void {\r\n\r\n        const expression_trail: t_expressionTrail =\r\n            // TODO: type t_ri0 needs to be changed after resolver types are updated\r\n            Resolution.extract_ExpressionTrail(talk);\r\n\r\n        const announcement_channel: t_channel = recipient_namespace +\r\n            this.get_Separator(\"Monologue\") +\r\n            expression_trail;\r\n\r\n        const announcement_packet: i_announcementPacket<TalkRi> = {\r\n            Channel: announcement_channel,\r\n            Sender: sender_namespace,\r\n            Recipient: recipient_namespace,\r\n            Talk: talk,\r\n            Time: (new Date()).getTime(),\r\n            Static: false,\r\n            Scope: scope,\r\n        };\r\n\r\n        const do_announcement = () => {\r\n\r\n            this._monologue_emitter.emit(\r\n                announcement_channel,\r\n                announcement_packet,\r\n            );\r\n\r\n            this.archive_Announcement(\r\n                sender_namespace,\r\n                announcement_channel,\r\n                announcement_packet,\r\n            );\r\n        };\r\n\r\n        if (delay) {\r\n\r\n            if (delay == true) {\r\n                delay = parseInt(C_Controller.GraceTime);\r\n            }\r\n\r\n            setTimeout(do_announcement, delay);\r\n\r\n        } else {\r\n            do_announcement();\r\n        }\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   DOCUMENT and REPORT for TALK\r\n */\r\n\r\n    /**\r\n     * Returns entire announcement archive since the start of the app\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public get_AnnouncementArchive(): Array<i_announcementArchiveItem> {\r\n        return this._announcement_archive;\r\n    }\r\n\r\n    /**\r\n     * Archives the given announcement data\r\n     * \r\n     * @param sender_namespace\r\n     * @param announcement_channel\r\n     * @param announcement_packet\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private archive_Announcement(\r\n        sender_namespace: t_namespace,\r\n        announcement_channel: t_channel,\r\n        announcement_packet: any = null,\r\n    ): void {\r\n\r\n        this._announcement_archive.push({\r\n            Namespace: sender_namespace,\r\n            Channel: announcement_channel,\r\n            Content: announcement_packet,\r\n            Time: (new Date()).getTime(),\r\n        });\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tLISTEN\r\n */\r\n\r\n    /**\r\n     * Listens to the specified channel. The talkers are not notified of who's \r\n     * listening\r\n     * \r\n     * @param sender_namespace: namespace of the class that is listening\r\n     * @param subcribed_namespace the target that is being subscribed to\r\n     * @param listen  resolution that will be listened for\r\n     * @param callback: function that will be executed when there is a new \r\n     * signal at the \r\n     * specified channel\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public subscribe<TalkArgs>(\r\n        listen: t_ri,\r\n        callback: (transmission: i_talk<TalkArgs>) => void,\r\n        subcribed_namespace: t_namespace,\r\n        scope: t_singleScope,\r\n    ): void {\r\n\r\n        const expression_trail: t_expressionTrail =\r\n            Resolution.extract_ExpressionTrail(listen);\r\n\r\n        const channel: t_channel = subcribed_namespace +\r\n            this.get_Separator(\"Monologue\") +\r\n            expression_trail;\r\n\r\n        this._monologue_emitter.on(\r\n            channel,\r\n            callback as (transmission: i_talk<TalkArgs>) => void,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     *  Similar to subscribe, listens to a specific channel but does not respond\r\n     *  to the source, Unlike subscribe, wait quits listening after a certain \r\n     *  number of occurences of the  channel, default = 1 also, wait has the \r\n     *  built in capacity to check whether the received emit meets the expected \r\n     *  criteria through the test callback\r\n     *\r\n     * @param waiter_namespace namespace of the class that is waiting\r\n     * @param recipient_namespace namespace that is being awaited \r\n     * @param listen method or announcement to listen to\r\n     * @param test_callback callback for determining whether the channel signal \r\n     * meets \r\n     * the wait criteria\r\n     * @param action_callback callback to execute if the test callbak returns true\r\n     * @param total_count number of times wait function will wait for the test \r\n     * callback to return true\r\n     * @param current_count current iteration count of the wait\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public wait<TalkArgs, Return>(\r\n        waiter_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        listen: t_ri,\r\n        test_callback: t_waitTestCallback<TalkArgs> = () => true ,\r\n        action_callback: t_waitActionCallback<TalkArgs, Return> =\r\n            (transmission) => transmission,\r\n        scope: t_singleScope,\r\n        total_count: number = 1,\r\n        current_count: number = total_count,\r\n    ): Promise<t_wait<TalkArgs, Return>> {\r\n        // TODO\r\n        // @ts-ignore\r\n        return new Promise((\r\n            resolve2: t_waitPromiseResponse<TalkArgs, Return>,\r\n        ) => {\r\n            const once_callback_function =\r\n                (transmission: i_talk<TalkArgs>) => {\r\n\r\n                    if (test_callback(transmission)) {\r\n\r\n                        current_count--;\r\n                        resolve2(action_callback(transmission));\r\n                        return action_callback(transmission);\r\n                    } else {\r\n\r\n                        const new_promise = this.wait<TalkArgs, Return>(\r\n                            waiter_namespace,\r\n                            recipient_namespace,\r\n                            listen,\r\n                            test_callback,\r\n                            action_callback,\r\n                            scope,\r\n                            total_count,\r\n                            current_count,\r\n                        );\r\n\r\n                        resolve2(new_promise);\r\n                        return new_promise;\r\n                    }\r\n                };\r\n\r\n            if (current_count > 0) {\r\n\r\n                const expression_trail: t_expressionTrail =\r\n                    Resolution.extract_ExpressionTrail(listen);\r\n\r\n                const channel: t_channel = recipient_namespace +\r\n                    this.get_Separator(\"Monologue\") +\r\n                    expression_trail;\r\n\r\n                this._monologue_emitter.once(\r\n                    channel,\r\n                    once_callback_function,\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits multiple conditions and returns promise when all of them are met\r\n     * \r\n     * @param waiter_namespace: namespace of the class that is waiting\r\n     * @param wait_set: set of wait conditions to be met\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public wait_Some<TalkArgs, Return>(\r\n        scope: t_singleScope,\r\n        waiter_namespace: t_namespace,\r\n        wait_set: Array<i_waitSet<TalkArgs, Return>>,\r\n    ): Promise<Array<t_wait<TalkArgs, Return>>> {\r\n        return Promise.all(wait_set\r\n            .map((wait_event: i_waitSet<TalkArgs, Return>) => {\r\n                return this.wait(\r\n                    waiter_namespace,\r\n                    wait_event.Namespace,\r\n                    wait_event.Listen,\r\n                    wait_event.Test,\r\n                    wait_event.Call,\r\n                    scope,\r\n                );\r\n        }));\r\n    }\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/// <reference path=\"../Controller/controller.ts\" />\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/*\r\n *\tLOCALS\r\n */\r\nimport { Controller } from \"../Controller/controller\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/**\r\n * Provides autocorrect for M_Controller\r\n * \r\n * @remarks\r\n * Class: M_Controller\r\n * Service: Controller\r\n */\r\nexport interface M_Controller extends M_Namespace {}\r\n\r\n\r\n\r\n/**\r\n * Provides Controller functionality\r\n * \r\n * @requires M_Namespace\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport abstract class M_Controller {\r\n\r\n    private _controller!: Controller;\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /**\r\n     * Sets or overwrites the controller for the class\r\n     *\r\n     * @remarks\r\n     * Class: M_Controller\r\n     * Service: Controller\r\n     */\r\n    protected set_Controller(): this {\r\n\r\n        if (this._controller) {\r\n            throw new Error(C_Controller.E_AlreadyDefined);\r\n        }\r\n\r\n        this._controller = new Controller(this.get_GlobalNamespace());\r\n\r\n        if (this.has_LocalNamespace()) {\r\n            this._controller.set_LocalNamespace(this.get_LocalNamespace());\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the controller for the class\r\n     *\r\n     * @remarks\r\n     * Class: M_Controller\r\n     * Service: Controller\r\n     */\r\n    protected get_Controller(): Controller {\r\n\r\n        if (!(this._controller instanceof Controller)) {\r\n            throw new Error(C_Controller.E_CalledBeforeDeclaration);\r\n        }\r\n\r\n        return this._controller;\r\n    }\r\n\r\n}\r\n","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { M_State } from \"@utkusarioglu/state\";\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/*\r\n *\tLOCALS\r\n */\r\nimport { M_Controller } from \"./m_controller\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport {\r\n    C_Controller,\r\n    C_BootState,\r\n    C_StartupTalk,\r\n} from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATA TYPES\r\n */\r\nimport {\r\n    i_subscription,\r\n    i_reception,\r\n    i_dependency_group,\r\n    i_service,\r\n    i_announcement,\r\n    e_Scope,\r\n    e_ServiceGroup,\r\n    t_singleScope,\r\n    i_sequenceStep,\r\n} from \"../Common/t_controller\";\r\nimport {\r\n    t_ri,\r\n    t_ri0,\r\n} from \"@utkusarioglu/resolver\";\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\nimport { t_epoch } from \"@utkusarioglu/state/t_state\";\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/**\r\n * Provides autocorrect for the class\r\n * \r\n * @requires M_Controller\r\n *\r\n * @remarks\r\n * Class: M_ControllerEvents\r\n * Service: Controller\r\n */\r\nexport interface M_ControllerEvents extends\r\n    M_Controller,\r\n    M_State,\r\n    M_Namespace { }\r\n\r\n\r\n\r\n/**\r\n * Introduces methods for registering subscriptions, dependencies, \r\n * announcements, and services for the extending class Handles the order of \r\n * operations for the controller  to run smoothly\r\n * The associated controller needs to be run by the child class \r\n * Global (and if needed, Local) namespaces need to be set before the \r\n * initializer is run Needs @link State function to be defined in the \r\n * parent to determine the local namespace\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport abstract class M_ControllerEvents {\r\n\r\n/*\r\n *\tLOGS\r\n */\r\n    private _subscriptions!: Array<i_subscription>;\r\n    private _announcements!: Array<i_announcement>;\r\n    private _receptions!: Array<i_reception>; // this isn't emitted, it's only for archiving\r\n    private _dependencies!: Array<i_dependency_group<any, any>>;\r\n    private _services!: Array<i_service>;\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\t\r\n *\tDeclaration of controls by the instantiating class\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tINCLUDE CONTROLS\r\n */\r\n\r\n    /**\r\n     * Includes the given array items among the subscriptions for the set local \r\n     * or global namespace\r\n     * \r\n     * @param subscription_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Subscriptions(\r\n        subscription_list: Array<i_subscription>,\r\n    ): this {\r\n\r\n        if (!this._subscriptions) {\r\n            this._subscriptions = [];\r\n        }\r\n\r\n        this._subscriptions.push(...subscription_list);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among the dependencies for the set local \r\n     * or global namespace\r\n     * \r\n     * @param dependencies_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Dependencies<TalkArgs, Return>(\r\n        dependencies_list: i_dependency_group<TalkArgs, Return>[],\r\n    ): this {\r\n\r\n        if (!this._dependencies) {\r\n            this._dependencies = [];\r\n        }\r\n\r\n        this._dependencies.push(...dependencies_list);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among announcement and subscriptions.\r\n     * Unlike other methos, this registers 2 different events\r\n     * \r\n     * @param reception_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Receptions(reception_list: i_reception[]): this {\r\n\r\n        if (!this._receptions) {\r\n            this._receptions = [];\r\n        }\r\n\r\n        if (!this._subscriptions) {\r\n            this._subscriptions = [];\r\n        }\r\n\r\n        if (!this._announcements) {\r\n            this._announcements = [];\r\n        }\r\n\r\n        this._receptions.push(...reception_list);\r\n\r\n        reception_list.forEach((reception: i_reception) => {\r\n\r\n            this._subscriptions.push({\r\n                Scope: reception.Scope,\r\n                Namespace: reception.Namespace || this.get_GlobalNamespace(),\r\n                Listen: reception.Listen,\r\n                Call: reception.Call,\r\n            } as i_subscription);\r\n\r\n            this._announcements.push({\r\n                Scope: reception.Scope,\r\n                Namespace: reception.Namespace,\r\n                Talk: reception.Talk,\r\n            } as i_announcement);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among the services for the set local or \r\n     * global namespace\r\n     * \r\n     * @param services_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Services(services_list: i_service[]): this {\r\n\r\n        if (!this._services) {\r\n            this._services = [];\r\n        }\r\n\r\n        this._services.push(...services_list);\r\n        return this;\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\t\r\n *\tRegistration of controls\r\n *\tAnnouncement of startup states\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tINITIALIZE CONTROLS\r\n */\r\n\r\n    /**\r\n     * Runs listen and talk operations in the order and times that they are \r\n     * supposed to be run\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public initialize_Controller(sequential_startup: boolean = true): this {\r\n\r\n        this.set_Controller();\r\n\r\n        if (sequential_startup) {\r\n\r\n            // Listens\r\n            this.get_Controller()\r\n                .wait(\r\n                    C_Controller.AllServices,\r\n                    C_StartupTalk.run_Listen,\r\n                    undefined,\r\n                    () => {\r\n\r\n                        this.register_Dependencies();\r\n                        this.register_Subscriptions();\r\n\r\n                        this.announce_ToAllServices(C_BootState.ListenReady);\r\n                    },\r\n                    e_Scope.Global,\r\n                );\r\n\r\n            // Talks\r\n            this.get_Controller()\r\n                .wait(\r\n                    C_Controller.AllServices,\r\n                    C_StartupTalk.run_Talk,\r\n                    undefined,\r\n                    () => {\r\n\r\n                        this.register_Announcements();\r\n                        this.register_Services();\r\n\r\n                        this.announce_ToAllServices(C_BootState.TalkReady);\r\n                    },\r\n                    e_Scope.Global,\r\n                );\r\n\r\n            this.announce_ToAllServices(C_BootState.ClassReady, 200)\r\n\r\n        } else {\r\n\r\n            this.register_Dependencies();\r\n            this.register_Subscriptions();\r\n            this.register_Announcements();\r\n            this.register_Services();\r\n            this.announce_ToAllServices(C_BootState.ClassReady, 200)\r\n\r\n        }\r\n\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREGISTER CONTROLS\r\n *\t\r\n *  These are used by the method {@link initialize_Controller} to register \r\n *  included controls\r\n */\r\n\r\n    /**\r\n     * Excetutes controller for the subscriptions that were registered by the\r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Subscriptions(): void {\r\n        if (this._subscriptions) {\r\n            this._subscriptions.forEach((subscription: i_subscription) => {\r\n                this.get_Controller().subscribe(\r\n                    subscription.Listen,\r\n                    subscription.Call,\r\n                    subscription.Namespace,\r\n                    subscription.Scope,\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the dependencies that were registered by the \r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Dependencies(): void {\r\n        if (this._dependencies && this._dependencies.length > 0) {\r\n            this._dependencies\r\n                .forEach((dependency: i_dependency_group<any, any>) => {\r\n                    this.get_Controller().wait_Some(\r\n                        dependency.Members,\r\n                        dependency.Scope,\r\n                    )\r\n                        .then((data) => {\r\n                            return dependency.Call(data);\r\n                        })\r\n                        .then(\r\n                            this.announce_ToAllServices.bind(\r\n                                this,\r\n                                C_BootState.DependencyReady,\r\n                            ),\r\n                        );\r\n            });\r\n        } else {\r\n            this.announce_ToAllServices(C_BootState.DependencyReady);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the announcements that were registered by the\r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Announcements(): void {\r\n        if (this._announcements) {\r\n            this._announcements.forEach((announcement: i_announcement) => {\r\n                this.get_Controller().announce(\r\n                    announcement.Namespace,\r\n                    announcement.Talk,\r\n                    announcement.Scope,\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the services that were registered by the \r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Services(): void {\r\n        if (this._services) {\r\n            this._services.forEach((service: i_service) => {\r\n                this.get_Controller().respond(\r\n                    service.Call,\r\n                    service.Static || false,\r\n                    service.Scope,\r\n                    e_ServiceGroup.Standard,\r\n                );\r\n            }); \r\n        }\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tMANAGE CONTROLLER SEQUENCES\r\n */\r\n\r\n    /**\r\n     * Executes the provided Controller talks and listens in sequence\r\n     * \r\n     * @param sequence_steps\r\n     * @param scope\r\n     * @param manager_namespace\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected manage_ControllerSequence(\r\n        sequence_steps: Array<i_sequenceStep>,\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n    ): Promise<any> {\r\n\r\n        let TEST;\r\n        //return Promise.resolve(this.get_GlobalNamespace());\r\n\r\n        const step_promise_stack:\r\n            Array<Promise<t_ri>> = [];\r\n\r\n        let steps_promise_sequence: Promise<void> = Promise.resolve();\r\n\r\n        sequence_steps.forEach((step, index) => {\r\n\r\n            step_promise_stack[index] =\r\n                this.produce_PromiseStackMember(\r\n                    scope,\r\n                    manager_namespace,\r\n                    step\r\n                );\r\n\r\n            steps_promise_sequence = steps_promise_sequence\r\n                .then(() => {\r\n                    return this.produce_StepsPromise(\r\n                        scope,\r\n                        manager_namespace,\r\n                        step_promise_stack,\r\n                        step,\r\n                        index,\r\n                    );\r\n\r\n                }); // steps_promise_sequence.then\r\n\r\n        }); // sequence_steps.forEach\r\n\r\n        //return Promise.resolve(sequence_steps[0].List);\r\n\r\n        return steps_promise_sequence;\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param scope\r\n     * @param manager_namespace\r\n     * @param step\r\n     */\r\n    produce_PromiseStackMember(\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n        step: i_sequenceStep,\r\n    ): Promise<t_ri> {\r\n        return new Promise((resolve_step_promise) => {\r\n            return this.get_Controller().wait<string, any>(\r\n                manager_namespace,\r\n                step.Listen,\r\n                (transmission) => {\r\n\r\n                    step.List = step.List.filter((value: string) => {\r\n                        return value !== transmission.Sender;\r\n                    });\r\n\r\n                    return step.List.length < 1;\r\n\r\n                },\r\n                () => {\r\n                    return resolve_step_promise(step.Listen);\r\n                },\r\n                scope,\r\n            ); // return this.get_Controller().wait\r\n\r\n        }); // step_promise_stack[index]\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param scope\r\n     * @param manager_namespace\r\n     * @param step_promise_stack\r\n     * @param step\r\n     * @param index\r\n     */\r\n    produce_StepsPromise(\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n        step_promise_stack: Array<Promise<any>>,\r\n        step: i_sequenceStep,\r\n        index: number,\r\n    ): Promise<any> {\r\n\r\n        step.sniff([\"StartMessage\"], undefined,\r\n            (start_message: string) => {\r\n                console.log(start_message);\r\n            });\r\n\r\n        step.sniff([\"Talk\"], undefined,\r\n            (step_talk: t_ri) => {\r\n                this.get_Controller().announce(\r\n                    manager_namespace,\r\n                    step_talk,\r\n                    scope,\r\n                );\r\n            });\r\n\r\n        const index_str: string = index.toString();\r\n\r\n        return step_promise_stack.sniff([index_str],\r\n            () => {\r\n                throw new Error(\r\n                    C_Controller.E_ActiveStepMemberCount\r\n                        .subs(index_str)\r\n                );\r\n            },\r\n            () => {\r\n                const active_step_promise_stack =\r\n                    step_promise_stack.slice(0, index + 1);\r\n\r\n                return Promise.all(active_step_promise_stack);\r\n            });\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tANNOUNCE STATES \r\n */\r\n\r\n    /**\r\n     * Standardized method for announcing to all services\r\n     * \r\n     * @param resolution_instruction\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected announce_ToAllServices(\r\n        resolution_instruction: t_ri,\r\n        delay: t_epoch = 0,\r\n    ): void {\r\n\r\n        this.get_Controller().announce(\r\n            C_Controller.AllServices,\r\n            resolution_instruction,\r\n            e_Scope.Global,\r\n            delay,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Standardized method for library adding\r\n     * \r\n     * @param library_source_namespace\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected announce_LibraryAdded(\r\n        library_source_namespace: t_namespace,\r\n    ): void {\r\n        this.get_Controller().announce(\r\n            C_Controller.AllServices,\r\n            [...C_BootState.LibraryAdded, [library_source_namespace]] as t_ri<[t_namespace]>,\r\n            e_Scope.Global,\r\n            true,\r\n        );\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}