{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Common/c_controller.ts","webpack:///./src/Common/t_controller.ts","webpack:///./src/Controller/controller.ts","webpack:///./node_modules/@utkusarioglu/resolver/index.js","webpack:///./src/Common/separator_handler.ts","webpack:///./src/index.ts","webpack:///./src/BaseController/base_controller.ts","webpack:///./node_modules/@utkusarioglu/event-emitter/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/Mixins/m_controller.ts","webpack:///./src/Mixins/m_controller_events.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RI","C_Controller","AllServices","GraceTime","E_AlreadyDefined","E_CalledBeforeDeclaration","E_NoScopeSelected","join","E_MultipleRequestsBeforeResponse","E_ForcedDynamic","E_ActiveStepMemberCount","C_BootState","ClassReady","ListenReady","TalkReady","ModulesReady","DependencyReady","ServerReady","TestReady","ModuleInstalled","LibraryAdded","C_StartupTalk","run_Listen","run_Talk","run_Requests","run_Modules","run_Server","run_Tests","send_Archive","add_Archive","e_Scope","e_ServiceGroup","Controller","SeparatorHandler","namespace","super","this","set_GlobalNamespace","_global_controller","BaseController","Global","flush_GlobalNamespaces","scope","responding_namespace","talk","group","Standard","responding_channel","get_Separator","instruction_code","Resolution","produce_UniqueInstructionCode","is_StaticResponder","_forced_dynamic_service","_static_content_archive","sniff","dynamic_transmission","request_DynamicTransmission","set_PromisifiedStaticContent","static_transmisson","console","warn","Time","Date","getTime","Promise","resolve","recipient_namespace","get_Scopes","request","_controller_global_namespace","response_func","is_static","_static_responders","push","forEach","active_scope","respond","get_DialogueArchive","channel","static_content","then","transmission","pave","LastDynamicTime","Static","log","delay","announce","indexOf","get_AnnouncementArchive","subcribed_namespace","listen","callback","subscribe","test_callback","action_callback","count","current_count","wait","wait_set","wait_Some","local_namespace","_controller_local_namespace","create_LocalNamespace","keys","_local_controllers","global_namespace","add_Controller_ToGlobalNamespaces","Local","_global_namespaces","list","length","Error","e","default","a","u","Parent","with","M_Namespace","M_State","initialize_State","set_ResolutionInstruction","is_ResolutionInstruction","JSON","stringify","get_State","set_Var","extract_ExpressionTrail_FromResolutionInstruction","set_ExpressionTrail","extract_ArgumentPool_fromResolutionInstruction","set_ArgumentPool","get_Var","produce_set_ExpressionStack_FromExpressionTrail","produce_ExpressionTrail_FromExpressionStack","C_Resolver","EXPRESSION_SEPARATOR","produce_ExpressionStack_FromExpressionTrail","set_ExpressionStack","split","slice","get_ExpressionStack","get_ArgumentPool","Last","First","map","During","splice","extract_ExpressionType","e_expressionType","Key","extract_MethodName","INSTANTIATION_INDICATOR","Instantiate","METHOD_INDICATOR","Method","replace","extender_class","reduce","produce_ClassExpression","getOwnPropertyNames","getOwnPropertyDescriptor","_global_namespace","C_Namespace","get_GlobalNamespace","produce_Stack","check_NamespaceInput","_local_namespace","get_LocalNamespace","E_NoEmpty","NamespaceSeparator","_channel","_id","Math","random","toString","_states","throw_OverloadError","C_State","E_VarNotDefined","subs","parse","entries","set_Separators","Separator","Directory","Expression","Id","Dialogue","Monologue","Namespace","Extension","SEPARATOR","is_empty","_tracking_enabled","get_Channel","Channel","get_Id","Variable","Value","copy_Var","_track_stack","E_TrackingOff","filter","e_filterMode","And","find","Or","assign_Property","E_PropertyRequired","assign_Class","E_ChOverload","Array","isArray","get_Vars","State","_state","set_Vars","remove_State","Function","window","pop","is_Object","has_Function","String","toProperCase","charAt","toUpperCase","substr","toLowerCase","minify","chop","RegExp","match","RulesVarName","E_NonPotentAttempt","E_NonStringType","E_DoesNotCarry","E_DepthInconsistent","E_TooDeep","E_TooShallow","E_MinTrailDepthLimit","DISABLED_PHRASE","Null","Other","Undefined","VariableType","ResolutionInstruction","e_typeDefinition","Resolver","MinTrailDepth","MaxTrailDepth","Recursion","set_Resolution","set_Passage","is_DisabledPassage","get_MaxResolutionDepth","get_MinResolutionDepth","produce_ResolutionDepth","get_EntryPoint","build_Items","check_ItemType","build_Resolution","build_Array","build_Object","concatenate_Items","constructor","check_ResolutionDepth","get_Sources","retrieve_ResolutionRules","produce_ExecutionStepStack","check_ExpressionAvailability","build_Arguments","DoesNotCarry","every","retrieve_ItemTypeArray","concatenate_Objects","set_Separators_FromGlobal","global","separators","_SEPARATOR","separator_name","M_Controller","M_ControllerEvents","controller_scope","_monologue_emitter","EventEmitter","setMaxListeners","_dialogue_emitter","_announcement_archive","_dialogue_archive","_controller_scope","sender_namespace","service_id","create_RandomServiceId","request_channel","response_channel","request_packet","Sender","Recipient","Talk","Scope","reject","once","response_packet","archive_Dialogue","emit","responder_namespace","response_callback","listen_channel","on","requested_return_content","serve_packet","Content","catch","error","Meta","Elapsed","Request","Response","eventNames","expression_trail","announcement_channel","announcement_packet","do_announcement","archive_Announcement","setTimeout","waiter_namespace","total_count","once_callback_function","new_promise","error_content","all","wait_event","Listen","Test","Call","_events","onOnce","Once","Callback","g","_controller","has_LocalNamespace","set_LocalNamespace","subscription_list","_subscriptions","dependencies_list","_dependencies","reception_list","_receptions","_announcements","reception","services_list","_services","set_Controller","get_Controller","undefined","register_Dependencies","register_Subscriptions","announce_ToAllServices","register_Announcements","register_Services","subscription","dependency","Members","data","announcement","service","sequence_steps","manager_namespace","step_promise_stack","steps_promise_sequence","step","index","produce_PromiseStackMember","produce_StepsPromise","resolve_step_promise","List","start_message","step_talk","index_str","active_step_promise_stack","resolution_instruction","library_source_namespace"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nimport {\r\n    i_map,\r\n    t_epoch\r\n} from \"./t_controller\";\r\nimport {\r\n    t_resolutionInstruction,\r\n    t_resolutionInstructionNoArgs\r\n} from \"@utkusarioglu/resolver\";\r\n\r\n\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tGLOBALS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nconst RI: \"RI\" = \"RI\";\r\n\r\n\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\nexport const C_Controller: i_map<string> = {\r\n\r\n    /** Namespace to use when a controller wants to talk to all services */\r\n    AllServices: \"App\",\r\n\r\n    /** The duration that is allowed to pass between sequence events. can\r\n     * be removed later on*/\r\n    // @ts-ignore\r\n    GraceTime: 20,\r\n\r\n    E_AlreadyDefined: \"Controller already defined\",\r\n    E_CalledBeforeDeclaration: \"Controller called before declaration\",\r\n    E_NoScopeSelected: [\"There is a problem with the scopes. \",\r\n        \"It may be due to undefiend LocalNamespace \",\r\n        \"if the code is expected to work in local scope\"].join(\"\"),\r\n    E_MultipleRequestsBeforeResponse: \"Multiple requests for the content was placed before the promise was resolved\",\r\n    E_ForcedDynamic: \"All services are forced to be dynamic\",\r\n    E_ActiveStepMemberCount: \"Active step requires %0 members\",\r\n};\r\n\r\nexport const C_BootState: i_map<t_resolutionInstructionNoArgs> = {\r\n\r\n    /** Class ready t_methodTrail for controller methods to emit/receive */\r\n    ClassReady: [RI, \"class_ready\"],\r\n\r\n    /** Listen ready t_methodTrail for controller methods to emit/receive */\r\n    ListenReady: [RI, \"listen_ready\"],\r\n\r\n    /** Talk ready t_methodTrail for controller methods to emit/receive */\r\n    TalkReady: [RI, \"talk_ready\"],\r\n\r\n    /** Fires when all modules load its content to the respective classes*/\r\n    ModulesReady: [RI, \"modules_ready\"],\r\n\r\n    /** Fires when the node has received all the dependency related service \r\n     * requests and completely ready for providing service for others\r\n     */\r\n    DependencyReady: [RI, \"dependency_ready\"],\r\n\r\n    /** Operation ready t_methodTrail for controller methods to emit/receive */\r\n    ServerReady: [RI, \"server_ready\"],\r\n\r\n    /** Test ready t_methodTrail for controller methods to emit/receive */\r\n    TestReady: [RI, \"test_ready\"],\r\n\r\n    ModuleInstalled: [RI, \"module_installed\"],\r\n\r\n    LibraryAdded: [RI, \"LibraryAdded\"],\r\n};\r\n\r\nexport const C_StartupTalk: i_map<t_resolutionInstructionNoArgs> = {\r\n\r\n    /** t_methodTrail for controller manager node to emit for the start of listen\r\n    * methods by all active nodes*/\r\n    run_Listen: [RI, \"run_listen\"],\r\n\r\n    /** t_methodTrail for controller manager node to emit for the start of talk by\r\n     * all active nodes */\r\n    run_Talk: [RI, \"run_talk\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Requests: [RI, \"run_requests\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Modules: [RI, \"run_modules\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Server: [RI, \"run_server\"],\r\n\r\n    /** t_methodTrail for controller managaer node to emit for the nodes to start\r\n     * requesting services from each other*/\r\n    run_Tests: [RI, \"run_tests\"],\r\n\r\n    /** Declares other services to send their libraries that are targeted to the sender*/\r\n    send_Archive: [RI, \"send_Archive\"],\r\n\r\n    /** Talk from the library holder to the service that is expecting libraries */\r\n    add_Archive: [RI, \"add_Archive()\"],\r\n    \r\n};\r\n\r\n\r\n","/*\r\n *\tLOCAL CLASSES\r\n */\r\nimport { BaseController } from \"../BaseController/base_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_resolutionInstructionNoArgs,\r\n    t_resolutionInstruction,\r\n} from \"@utkusarioglu/resolver\";\r\n\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\n\r\n\r\n/*\r\n * ========================================================================== Boundary 1 =========\r\n *\r\n *\tSTAND INS\r\n *\r\n * ===============================================================================================\r\n */\r\n\r\n/**\r\n * Number used as unix epoch\r\n */\r\nexport type t_epoch = number;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n *\tSCOPE\r\n */\r\n\r\n/**\r\n * Legal scopes for the controller\r\n * \r\n * Local only emits to local namespace (if defined)\r\n * Global emits to global namespace\r\n * LocalAndGlobal emits to both\r\n */\r\nexport enum e_Scope {\r\n    Local = 1,\r\n    Global = 10,\r\n    LocalAndGlobal = 11,\r\n}\r\n\r\n/**\r\n * All legal values of e_Scope\r\n */\r\nexport type t_scope = e_Scope;\r\n\r\n/**\r\n * Only single scope allowed\r\n */\r\nexport type t_singleScope = e_Scope.Local | e_Scope.Global;\r\n\r\n\r\n\r\n/**\r\n * Contains specifications for the transmission error\r\n */\r\nexport interface t_error {\r\n\r\n}\r\n\r\n\r\n/**\r\n * Alias for string to denote channel\r\n */\r\nexport type t_channel = string;\r\n\r\n/**\r\n * Alias for string to denote the unique service id\r\n */\r\nexport type t_serviceId = string;\r\n\r\n/**\r\n * Stores specifications required for the wait method to run\r\n */\r\nexport interface t_waitSet {\r\n    /** Namespace of the target that is being waited*/\r\n    Namespace: t_namespace;\r\n    /** the resolution to listen to */\r\n    Listen: t_resolutionInstructionNoArgs;\r\n    /** callback function to determine if the emit from the awaited meets the requirements*/\r\n    Test?: (transmission: t_transmission) => boolean;\r\n    /** callback to be executed once the awaited passes the test*/\r\n    Call?: (transmission: t_transmission) => any;\r\n}\r\n\r\n/**\r\n * Alias for any to denote the content transmitted via t_transmission\r\n */\r\nexport type t_transmissionContent = any;\r\n\r\n\r\n/**\r\n * Contains keys that are expected to be transmitted by controller methods\r\n */\r\nexport interface t_transmission {\r\n    /** namespace of the sender*/\r\n    Sender: t_namespace;\r\n    /** namespace of the recipient*/\r\n    Recipient: t_namespace;\r\n    /** Redundant info for ease of access, concatenating:\r\n     * 1- recipient namespace  \r\n     * 2- method or announcement separator (whichever applies)\r\n     * 3- service group\r\n     * 4- id separator (if applies)\r\n     * 5- id (if applies)\r\n     */\r\n    Channel?: t_channel;\r\n    /** denotes the service group in service transmissions */\r\n    Group?: e_ServiceGroup;\r\n    /** Listening resolution involved with the transmission */\r\n    Listen?: t_resolutionInstructionNoArgs;\r\n    /** Talking that is involved with the transmission*/\r\n    Talk?: t_resolutionInstruction;\r\n    /** transmission content that is created by the responder */\r\n    Content?: t_transmissionContent;\r\n    /** Error content if an error occured*/\r\n    Error?: t_error;\r\n    /** Unique request code*/\r\n    Id?: t_serviceId;\r\n    /** epoch when the transmission occured */\r\n    Time: t_epoch;\r\n    Static: boolean;\r\n    LastDynamicTime?: t_epoch;\r\n    Scope: e_Scope;\r\n}\r\n\r\n\r\n/**\r\n * Datatype for instructing multiple waits followed by a call\r\n */\r\nexport interface t_dependency_group {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_singleScope;\r\n    /** Dependency members to be waited*/\r\n    Members: t_waitSet[];\r\n    /** Callback function to be executed once all the dependencies become available*/\r\n    Call: (value: any) => Promise<any>;\r\n}\r\n\r\n/**\r\n * Datatype for instructing monitor of a channel\r\n */\r\nexport interface t_subscription {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** The namespace that is being subscribed to*/\r\n    Namespace: t_namespace;\r\n    /** Resolution that is being subscribed at */\r\n    Listen: t_resolutionInstructionNoArgs;\r\n    /** Callback function to be executed when the subscription emits*/\r\n    Call: (value: any) => any;\r\n}\r\n\r\n/**\r\n * Datatype for instructing monitor of a channel followed by a call whose \r\n * return is emitted to the requester\r\n */\r\nexport interface t_service {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace that is expected to respond to the request*/\r\n    Namespace: t_namespace;\r\n    /** Specific method that is being requested*/\r\n    Listen: t_resolutionInstructionNoArgs;\r\n    /** Callback function to be executed on the response transmission*/\r\n    Call: (value: any) => any;\r\n    /** Whelther the service is static */\r\n    Static?: boolean;\r\n    /** Service group */\r\n    Group: e_ServiceGroup;\r\n}\r\n\r\n/**\r\n * Datatype for announcing a listening channel to which multiple clases can independently \r\n * send data towards, which will independently handled by the call function\r\n */\r\nexport interface t_reception {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace that is accepting the admissions */\r\n    Namespace?: t_namespace;\r\n    /** Announcement resolution */\r\n    Talk: t_resolutionInstruction;\r\n    /** Listening resolution */\r\n    Listen: t_resolutionInstructionNoArgs;\r\n    /** function that will be called when another node emits to the channel (namespace + . + method) */\r\n    Call: (value: any) => any;\r\n}\r\n\r\n/**\r\n * Datatype for instructing emit of data to a certain channel without any \r\n * following listening activity by the emitter\r\n */\r\nexport interface t_announcement {\r\n    /** 1: Local, 2 or 10: global, 3 or 11: global + local */\r\n    Scope: t_scope;\r\n    /** Namespace of the announcer*/\r\n    Namespace: t_namespace;\r\n    /** the resolution that will be processed by the target */\r\n    Talk: any;\r\n}\r\n\r\nexport enum e_ServiceGroup {\r\n    Standard,\r\n}\r\n\r\n/**\r\n * Data structure for Controller class static content archive\r\n */\r\nexport interface t_staticContentArchive {\r\n    [channel: string]: {\r\n        [unique_request_code: string]: t_transmission,\r\n    };\r\n}\r\n\r\n/**\r\n * Stores local controllers\r\n */\r\nexport interface t_localControllerStack {\r\n    [namespace: string]: BaseController;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Defines the properties necessary for executing one step\r\n */\r\nexport interface t_sequenceStep {\r\n    /** Console mesage for the start of the step if enabled */\r\n    StartMessage?: string;\r\n    /** Console mesage for the end of the step if enabled */\r\n    EndMessage?: string;\r\n    /** Instruction to be listened to for determining the services' completion of the step */\r\n    Listen: t_resolutionInstructionNoArgs;\r\n    /** List of namespaces that are required to complete the step */\r\n    List: t_namespace[];\r\n    /** Instruction to announce to listening services that the step execution is shall \r\n     * be carried out. Some steps may not require a talk as the execution starts through \r\n     * some other method */\r\n    Talk?: t_resolutionInstructionNoArgs;\r\n}\r\n\r\n/**\r\n * Generic mapping object for Controller\r\n */\r\nexport interface i_map<T> { [key: string]: T; }\r\n","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { Resolution } from \"@utkusarioglu/resolver\";\r\n\r\n/*\r\n *\tLOCAL CLASSES\r\n */\r\nimport { BaseController } from \"../BaseController/base_controller\";\r\nimport { SeparatorHandler } from \"../Common/separator_handler\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_resolutionInstruction,\r\n    t_resolutionInstructionNoArgs,\r\n    t_instructionCode,\r\n} from \"@utkusarioglu/resolver\";\r\nimport {\r\n    t_scope,\r\n    t_singleScope,\r\n    t_waitSet,\r\n    t_transmission,\r\n    e_ServiceGroup,\r\n    t_staticContentArchive,\r\n    e_Scope,\r\n    t_localControllerStack,\r\n    t_channel,\r\n    t_epoch,\n} from \"../Common/t_controller\";\r\nimport { i_map } from \"@utkusarioglu/state/t_state\"; // This should be removed\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/**\r\n * Establishes local and global event emitters,\r\n * Stores the history of exchanges\r\n *\r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport class Controller extends SeparatorHandler {\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /** \r\n     *  Provides BaseController functionality for global scope\r\n     */\r\n    private static _global_controller = new BaseController(e_Scope.Global);\r\n\r\n    /** \r\n     *  Provides BaseContoller functionality for local scopes\r\n     */\r\n    private static _local_controllers: t_localControllerStack = {};\r\n\r\n    /** \r\n     *  List of registered classes\r\n     */\r\n    private static _global_namespaces: t_namespace[] = [];\r\n\r\n    /** \r\n     *  Global namespace for this controller instance\r\n     */\r\n    private _controller_global_namespace!: t_namespace;\r\n\r\n    /** \r\n     *  Local namespace for this controller instance\r\n     */\r\n    private _controller_local_namespace!: t_namespace;\r\n\r\n    /** \r\n     *  Holds the static content for every responder \r\n     */\r\n    private static _static_content_archive: t_staticContentArchive = {};\r\n\r\n    /** \r\n     *  Channels that respond statically \r\n     */\r\n    private static _static_responders: t_namespace[] = [];\r\n\r\n    /** \r\n     *  Boolean that states whether the static content archive \r\n     *  will be ignored \r\n     */\r\n    private static _forced_dynamic_service: boolean = false;\r\n\r\n    /**\r\n     * Establishes local and global event emitters,\r\n     * Stores the history of exchanges\r\n     * \r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    constructor(namespace: t_namespace) {\r\n        super();\r\n\r\n        this.set_GlobalNamespace(namespace);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all the previously defined global controllers\r\n     * \r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static flush_GlobalController(): void {\r\n        Controller._global_controller = new BaseController(e_Scope.Global);\r\n        Controller.flush_GlobalNamespaces();\r\n    }\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDIALOGUE\r\n *\t\r\n *\tRequest and Respond functions together form the \"service\" feature.\r\n *\t{@link A_Controller} class introduces include_Services method for \r\n *\tregistering responses\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREQUEST\r\n */\r\n\r\n    /**\r\n     * Requests data from a certain channel, expects a .then response\r\n     * If the responding channel is registered the group as static, static \r\n     * response will be served\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param responding_namespace t_namespace for the recipient\r\n     * @param talk t_resolution that will be processed by the responding class\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public request(\r\n        scope: t_singleScope,\r\n        responding_namespace: t_namespace,\r\n        talk: t_resolutionInstruction,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): Promise<t_transmission> {\r\n\r\n        const responding_channel =\r\n            responding_namespace +\r\n            this.get_Separator(\"Dialogue\") + group;\r\n\r\n        const instruction_code =\r\n            Resolution.produce_UniqueInstructionCode(talk);\r\n\r\n        if (Controller.is_StaticResponder(responding_channel) &&\r\n            !Controller._forced_dynamic_service) {\r\n\r\n            return Controller._static_content_archive.sniff(\r\n                [\r\n                    responding_channel,\r\n                    instruction_code,\r\n                ],\r\n                () => {\r\n\r\n                    const dynamic_transmission =\r\n                        this.request_DynamicTransmission(\r\n                            scope,\r\n                            responding_namespace,\r\n                            talk,\r\n                            group,\r\n                        );\r\n\r\n                    Controller.set_PromisifiedStaticContent(\r\n                        responding_channel,\r\n                        instruction_code,\r\n                        dynamic_transmission,\r\n                    ); \r\n\r\n                    return dynamic_transmission;\r\n                },\r\n                (static_transmisson: t_transmission) => {\r\n\r\n                    console.warn(\"Serving static content\");\r\n\r\n                    static_transmisson.Time = (new Date()).getTime();\r\n                    return Promise.resolve(static_transmisson);\r\n                },\r\n            ); // sniff\r\n\r\n        } else {\r\n\r\n            return this.request_DynamicTransmission(\r\n                scope,\r\n                responding_namespace,\r\n                talk,\r\n                group,\r\n            );\r\n\r\n        } // if is_static_responder\r\n    }\r\n\r\n    /**\r\n     * Requests dynamic transmission from related scopes\r\n     * \r\n     * @param scope\r\n     * @param recipient_namespace\r\n     * @param talk\r\n     * @param group\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private request_DynamicTransmission(\r\n        scope: t_singleScope,\r\n        recipient_namespace: t_namespace,\r\n        talk: t_resolutionInstruction,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): Promise<t_transmission> {\r\n        return this\r\n            .get_Scopes(scope)[0]\r\n            .request(\r\n                scope,\r\n                this._controller_global_namespace,\r\n                recipient_namespace,\r\n                talk, group,\r\n            );\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tRESPOND\r\n */\r\n\r\n    /**\r\n     * Responds to controller requests\r\n     * {@link A_Controller} class introduces include_Services method for \r\n     * registering responses\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param response_func (t_transmission) => Promise that will process the \r\n     * request\r\n     * @param is_static: if true, the created response will be saved for the \r\n     * controller for \r\n     * speedy re-response in future requests, if false, the response callback \r\n     * will be called \r\n     * everytime the same request is made\r\n     * @param group defines the set of methods that is available for the \r\n     * response. Used for responding to differing security clearances\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public respond(\r\n        scope: t_scope,\r\n        response_func: (t_transmission: t_transmission) => Promise<any>,\r\n        is_static: boolean = true,\r\n        group: e_ServiceGroup = e_ServiceGroup.Standard,\r\n    ): void {\r\n\r\n        if (is_static) {\r\n            Controller._static_responders.push(\r\n                this._controller_global_namespace + \r\n                this.get_Separator(\"Dialogue\") + \r\n                group,\r\n            );\r\n        }\r\n\r\n        this.get_Scopes(scope).forEach((active_scope: BaseController) => {\r\n            active_scope.respond(\r\n                this._controller_global_namespace,\r\n                response_func,\r\n                group,\r\n                scope,\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tDOCUMENT and REPORT for DIALOGUE\r\n */ \r\n\r\n    /**\r\n     * Returns the entire history of dialogues since the App run\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_DialogueArchive(scope: t_singleScope): object {\r\n        return this.get_Scopes(scope)[0].get_DialogueArchive();\r\n    }\r\n\r\n    /**\r\n     * Returns all the channels that are being served\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    // public get_ServedChannels(scope: t_singleScope): (string | symbol)[] {\r\n    //    return this.get_Scopes(scope)[0].get_ServedChannels();\r\n    // }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE STATIC SERVICE\r\n */\r\n\r\n    /**\r\n     * Resolves the transmission promise, corrects the time of the transmission\r\n     * Saves the content as static for the given channel and code\r\n     * Warning: content served will remain to be dynamic until the promise \r\n     * is resolved\r\n     * \r\n     * @param channel\r\n     * @param instruction_code\r\n     * @param static_content\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static set_PromisifiedStaticContent(\r\n        channel: t_channel,\r\n        instruction_code: t_instructionCode,\r\n        static_content: Promise<t_transmission>,\r\n    ): void {\r\n        static_content\r\n            .then((transmission: t_transmission) => {\r\n\r\n                Controller._static_content_archive.pave(\r\n                    [\r\n                        channel,\r\n                        instruction_code,\r\n                    ],\r\n                    () => {\r\n                        console.warn(\r\n                            C_Controller.E_MultipleRequestsBeforeResponse,\r\n                        );\r\n                    },\r\n                    () => {\r\n\r\n                        transmission.LastDynamicTime = transmission.Time;\r\n                        transmission.Time = 0;\r\n                        transmission.Static = true;\r\n\r\n                        return transmission;\r\n                    },\r\n                );\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns all channels that registered static service\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_AllStaticChannels(): t_namespace[] {\r\n        return Controller._static_responders;\r\n    }\r\n\r\n    /**\r\n     * Returns all the static content that is currently archived\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_AllStaticContent(): t_staticContentArchive {\r\n        return Controller._static_content_archive;\r\n    }\r\n\r\n    /**\r\n     * Clears the static content archive, forcing re-build\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static flush_StaticContentArchive(): void {\r\n        Controller._static_content_archive = {};\r\n    }\r\n\r\n    /**\r\n     * Forces all services to remain dynamic despit what the service \r\n     * provider intends\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static force_AllDynamicService(): void {\r\n        console.log(C_Controller.E_ForcedDynamic);\r\n        Controller._forced_dynamic_service = true;\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tMONOLOGUE\r\n *\t\r\n *\tThese methods emit or listen to a certain channel but they do not expect \r\n *\tthe other side to take any kind of action.\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   TALK\r\n *   \r\n *   These emit locally or globally\r\n */\r\n\r\n    /**\r\n     * Declares to a channel and doesnt expect a response\r\n     * \r\n     * @param scope specifies local and/or global scope\r\n     * @param recipient_namespace the namespace that is the primary target for \r\n     * the announcement\r\n     * @param talk the talk resolution for the announcement\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public announce(\r\n        scope: t_scope,\r\n        recipient_namespace: t_namespace,\r\n        talk: t_resolutionInstruction,\r\n        delay: boolean | t_epoch = false,\r\n    ): void {\r\n\r\n        this.get_Scopes(scope).forEach((active_scope: BaseController) => {\r\n            active_scope.announce(\r\n                scope as t_singleScope,\r\n                this._controller_global_namespace,\r\n                recipient_namespace,\r\n                talk,\r\n                delay,\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tDOCUMENT and REPORT for TALK\r\n */\r\n\r\n    /**\r\n     * Returns true if the specified channel is registered as a static \r\n     * responder\r\n     * \r\n     * @param channel\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static is_StaticResponder(channel: t_channel): boolean {\r\n        return this._static_responders.indexOf(channel) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Returns the entire list of announcements since app start\r\n     */\r\n    public get_AnnouncementArchive(scope: t_singleScope): object[] {\r\n        return this.get_Scopes(scope)[0].get_AnnouncementArchive();\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tLISTEN\r\n *\t\r\n *\tThese listen globally or locally\r\n */\r\n\r\n    /**\r\n     * Listens during the run of the app, it may take internal action \r\n     * but the emitter talker will not be notified of this\r\n     * \r\n     * @param scope specifies local and/or global scope\r\n     * @param subcribed_namespace t_namespace that will be monitored\r\n     * @param listen t_resolutionNoArgs that will be monitored\r\n     * @param callback: (t_transmission) => void action to take when there \r\n     * is chatter\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public subscribe(\r\n        scope: t_scope,\r\n        subcribed_namespace: t_namespace,\r\n        listen: t_resolutionInstructionNoArgs,\r\n        callback: (transmission: t_transmission) => void,\r\n    ): void {\r\n\r\n        this.get_Scopes(scope).forEach((active_scope: BaseController) => {\r\n            active_scope.subscribe(\r\n                scope as t_singleScope,\r\n                subcribed_namespace,\r\n                listen,\r\n                callback);\r\n        });\r\n    }\r\n     \r\n    /**\r\n     * \r\n     * Similar to subscribe, listens to a specific channel but does not \r\n     * respond to the source, Unlike subscribe, wait quits listening after \r\n     * a certain number of occurences of the channel, default = 1\r\n     * \r\n     * @param scope Local or global\r\n     * @oaram recipient_namespace t_namespace that will be monitored\r\n     * @param listen t_resolutionNoArgs used for monitoring\r\n     * @param test_callback callback for determining whether the channel \r\n     * signal meets the wait criteria\r\n     * @param action_callback: callback to execute if the test callbak \r\n     * returns true\r\n     * @param count number of times wait function will wait for the test \r\n     * callback to return true\r\n     * @param current_count current iteration count of the wait\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public wait(\r\n        scope: t_singleScope,\r\n        recipient_namespace: t_namespace,\r\n        listen: t_resolutionInstructionNoArgs,\r\n        test_callback: (transmission: t_transmission) => boolean = () => true,\r\n        action_callback: (transmission: t_transmission) => void = () => { },\r\n        count: number = 1,\r\n        current_count: number = count,\r\n    ): Promise<any> {\r\n        const wait_response = this.get_Scopes(scope)[0].wait(\r\n            scope,\r\n            this._controller_global_namespace,\r\n            recipient_namespace,\r\n            listen,\r\n            test_callback,\r\n            action_callback,\r\n            count,\r\n            current_count,\r\n        );\r\n\r\n        return wait_response;\r\n    }\r\n\r\n    /**\r\n     * Waits multiple conditions and returns promise when all of them are met\r\n     * \r\n     * @param scope defines local and/or global scope\r\n     * @param wait_set: instructions for the wait conditions\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public wait_Some(\r\n        scope: t_singleScope,\r\n        wait_set: t_waitSet[],\r\n    ): Promise<any> {\r\n        return this\r\n            .get_Scopes(scope)[0]\r\n            .wait_Some(\r\n                scope,\r\n                this._controller_global_namespace,\r\n                wait_set,\r\n            );\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tHANDLE\r\n *\t\r\n *\tGetters, Setters, Checkers and Manipulators\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE NAMESPACE\r\n *\t\r\n *\tMethods involved with getting and setting global and local namespaces \r\n *\tfor the instance\r\n */\r\n\r\n    /**\r\n     * Sets the namespace used for listening and emitting to local\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public set_LocalNamespace(local_namespace: t_namespace): this {\r\n        this._controller_local_namespace = local_namespace;\r\n        this.create_LocalNamespace(local_namespace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the local namespace that the class emits and listens to\r\n     */\r\n    public get_LocalNamespace(): t_namespace {\r\n        return this._controller_local_namespace;\r\n    }\r\n\r\n    /**\r\n     * Gets the entire list of registered local namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_LocalNamespaces(): t_namespace[] {\r\n        return Object.keys(Controller._local_controllers);\r\n        // return Controller._namespaces;\r\n    }\r\n\r\n    /**\r\n     * Sets the global namespace for this instance\r\n     * \r\n     * @param global_namespace as t_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public set_GlobalNamespace(global_namespace: t_namespace): this {\r\n        this._controller_global_namespace = global_namespace;\r\n        this.add_Controller_ToGlobalNamespaces(global_namespace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the namespace that the class is registered as\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_GlobalNamespace(): t_namespace {\r\n        return this._controller_global_namespace;\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a local namespace with the given name\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private create_LocalNamespace(local_namespace: t_namespace): void {\r\n        Controller._local_controllers\r\n            .pave([local_namespace],\r\n                () => {\r\n                    // console.warn(`${local_namespace} already exists`)\r\n                },\r\n                () => {\r\n                    return new BaseController(e_Scope.Local);\r\n                },\r\n            );\r\n        // Controller._local_controllers[local_namespace] = \r\n    }\r\n\r\n    /**\r\n     * Deletes the local namespace\r\n     * \r\n     * @param local_namespace\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private destroy_LocalNamespace(local_namespace: t_namespace): void {\r\n        delete Controller._local_controllers[local_namespace];\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE GLOBAL NAMESPACES\r\n */\r\n\r\n    /**\r\n     * \r\n     * @param controller_namespace\r\n     */\r\n    private add_Controller_ToGlobalNamespaces(\r\n        global_namespace: t_namespace,\r\n    ): void {\r\n        Controller._global_namespaces.push(global_namespace);\r\n    }\r\n\r\n    /**\r\n     * Returns all the controller registered global namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public get_GlobalNamespaces(): t_namespace[] {\r\n        return Controller._global_namespaces;\r\n    }\r\n\r\n    /**\r\n     * Clears the list of previously defined global namespaces\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private static flush_GlobalNamespaces(): void {\r\n        Controller._global_namespaces = [];\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE SCOPE\r\n */\r\n\r\n    /**\r\n     * Returns an array of Basecontrollers for the given scope value\r\n     * \r\n     * @param scope: number that defines the scopes \r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    private get_Scopes(scope: t_scope | t_singleScope): BaseController[] {\r\n\r\n        const list: BaseController[] = [];\r\n\r\n        if (scope & 1) {\r\n            if (this._controller_local_namespace) {\r\n                list.push(\n                    Controller\n                        ._local_controllers[this._controller_local_namespace],\n                );\n            }\r\n        }\r\n\r\n        if (scope & 2) {\r\n            list.push(Controller._global_controller);\r\n        }\r\n\r\n        if (list.length < 1) {\r\n            throw new Error(C_Controller.E_NoScopeSelected);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Returns all currently defined local controllers\r\n     *\r\n     * @remarks\r\n     * Class: Controller\r\n     * Service: Controller\r\n     */\r\n    public static get_LocalControllerStack(): t_localControllerStack {\r\n        return Controller._local_controllers;\r\n    }\r\n}\r\n\r\n\r\n\r\n","!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=6)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(1),i=r(2),o=r(3),s=r(4),a=r(5),u=\"RI\";class c extends(n.Parent().with(i.M_Namespace,o.M_State)){constructor(e){return super(),this.set_GlobalNamespace(\"App/Common/Resolver/Resolution\"),this.initialize_State(),this.set_ResolutionInstruction(e),this}set_ResolutionInstruction(e){if(!c.is_ResolutionInstruction(e)){const t=JSON.stringify(e);throw new Error(`Illegal resolution Instruction:\\n${t}`)}this.get_State().set_Var(\"ResolutionInstruction\",e);const t=c.extract_ExpressionTrail_FromResolutionInstruction(e);this.set_ExpressionTrail(t);const r=c.extract_ArgumentPool_fromResolutionInstruction(e);return this.set_ArgumentPool(r),this}get_ResolutionInstruction(){return this.get_State().get_Var(\"ResolutionInstruction\")}static is_ResolutionInstruction(e){return e[0]===u&&e.length>1}static produce_UniqueInstructionCode(e){return JSON.stringify(e)}set_ExpressionTrail(e){if(\"\"===e)throw new Error(\"ExpressionTrail cannot be empty\");return this.get_State().set_Var(\"ExpressionTrail\",e),this.produce_set_ExpressionStack_FromExpressionTrail(e),this}get_ExpressionTrail(){return this.get_State().get_Var(\"ExpressionTrail\")}produce_set_ExpressionTrail_FromExpressionStack(e){const t=c.produce_ExpressionTrail_FromExpressionStack(e);this.set_ExpressionTrail(t)}static produce_ExpressionTrail_FromExpressionStack(e){return e.join(s.C_Resolver.EXPRESSION_SEPARATOR)}static extract_ExpressionTrail_FromResolutionInstruction(e){return e[1]}set_ExpressionStack(e){return this.get_State().set_Var(\"ExpressionStack\",e),this}get_ExpressionStack(){return this.get_State().get_Var(\"ExpressionStack\")}produce_set_ExpressionStack_FromExpressionTrail(e){const t=c.produce_ExpressionStack_FromExpressionTrail(e);this.set_ExpressionStack(t)}static produce_ExpressionStack_FromExpressionTrail(e){return e.split(s.C_Resolver.EXPRESSION_SEPARATOR)}static extract_ArgumentPool_fromResolutionInstruction(e){return e.length>2?e.slice(2-e.length):[]}set_ArgumentPool(e){this.get_State().set_Var(\"ArgumentPool\",e)}get_ArgumentPool(){return this.get_State().get_Var(\"ArgumentPool\")}produce_ExecutionStepStack(e){let t=0,r=this.get_ExpressionStack(),n=this.get_ArgumentPool();e.hasOwnProperty(\"Last\")&&(r=[...r,...e.Last]),e.hasOwnProperty(\"First\")&&(t+=e.First.length,r=[...e.First,...r]),e.hasOwnProperty(\"During\")&&r.map((i,o)=>{const s=o+t;if(e.During[s]){const t=e.During[s],i=r.splice(o,1,t);n.splice(o,0,i)}});let i=0;return r.map(e=>{const t=c.extract_ExpressionType(e);if(t!==a.e_expressionType.Key){const r=n[i++]||[];return[t,c.extract_MethodName(e),r]}return[t,e]})}static extract_ExpressionType(e){return e.slice(0,4)===this.INSTANTIATION_INDICATOR?a.e_expressionType.Instantiate:e.slice(-2)===this.METHOD_INDICATOR?a.e_expressionType.Method:a.e_expressionType.Key}static extract_MethodName(e){return e.replace(this.INSTANTIATION_INDICATOR,\"\").replace(this.METHOD_INDICATOR,\"\")}produce_ResolutionDepth(){return this.get_ExpressionStack().length}}t.Resolution=c,c.METHOD_INDICATOR=\"()\",c.INSTANTIATION_INDICATOR=\"new \"},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);t.Parent=n.Parent},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Parent=e=>new n(e);class n{constructor(e){this.extender_class=e||class{}}with(...e){return e.reduce((e,t)=>n.produce_ClassExpression(t)(e),this.extender_class)}static produce_ClassExpression(e){return t=>{const r=class extends t{};return Object.getOwnPropertyNames(e.prototype).forEach(t=>{r.prototype.hasOwnProperty(t)||Object.defineProperty(r.prototype,t,Object.getOwnPropertyDescriptor(e.prototype,t))}),r}}}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);t.M_Namespace=n.M_Namespace},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(2);t.M_Namespace=class{get_GlobalNamespace(){if(!this._global_namespace)throw new Error(n.C_Namespace.E_CalledBeforeDeclaration);return this._global_namespace}get_GlobalNamespaceStack(){const e=this.get_GlobalNamespace();return this.produce_Stack(e)}set_GlobalNamespace(e){if(void 0!==this._global_namespace)throw new Error(n.C_Namespace.E_AlreadyDefined);return this.check_NamespaceInput(e),this._global_namespace=e,this}get_LocalNamespace(){if(!this._local_namespace)throw new Error(n.C_Namespace.E_CalledBeforeDeclaration);return this._local_namespace}get_LocalNamespaceStack(){const e=this.get_LocalNamespace();return this.produce_Stack(e)}set_LocalNamespace(e){if(this._local_namespace)throw new Error(n.C_Namespace.E_AlreadyDefined);this.check_NamespaceInput(e),this._local_namespace=e}has_LocalNamespace(){return void 0!==this._local_namespace&&null!==this._local_namespace}check_NamespaceInput(e){if(void 0===e||0===e.length)throw new Error(n.C_Namespace.E_NoEmpty)}produce_Stack(e){return e.split(n.C_Namespace.NamespaceSeparator)}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_Namespace={E_AlreadyDefined:\"%1 Namespace already defined\",E_CalledBeforeDeclaration:\"%1 Namespace called before declaration\",E_NoEmpty:\"%1 Namespace declaration cannot be empty\",NamespaceSeparator:\"/\"}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=2)}([function(e,t,r){\"use strict\";(function(e){Object.defineProperty(t,\"__esModule\",{value:!0}),r(5),r(6);const n=r(1),i=r(7);class o{constructor(e=\"Generic\",t=null){this._channel=e,this._id=t||Math.random().toString().slice(2),o._states.pave([this._channel,this._id],()=>{this.throw_OverloadError()},()=>({}))}get_Var(e){return o._states.sniff([this._channel,this._id],()=>{console.log(n.C_State.E_VarNotDefined.subs(this._channel,this._id))},t=>t.sniff(e,()=>{},e=>e))}set_Var(e,t){return o._states[this._channel][this._id].pave(e,()=>t,()=>t),this}copy_Var(e){const t=this.get_Var(e);return t?JSON.parse(JSON.stringify(t)):void 0}has_Var(e){return o._states[this._channel][this._id].sniff(e,()=>!1,()=>!0)}set_Vars(e){return Object.entries(e).forEach(([e,t])=>{this.set_Var(e,t)}),this}get_Vars(){return o._states[this._channel][this._id]}static get_AllStates(e=!0){if(e){let e={};return Object.entries(this._states).forEach(([t,r])=>{const n=Object.keys(r);n.length<2?e[t]=r[n[0]]:e[t]=r}),e}return o._states}get_Id(){return this._id}get_Channel(){return this._channel}set_Separators_FromGlobal(){e.hasOwnProperty(\"Separator\")?this.set_Separators(e.Separator):this.set_Separators({Directory:\"/\",Expression:\".\",Id:\"-\",Dialogue:\"?\",Monologue:\":\",Namespace:\"/\",Extension:\".\"})}set_Separators(e){o.SEPARATOR=e}remove_State(){delete o._states[this._channel][this._id],o._states[this._channel].is_empty()&&delete o._states[this._channel]}static remove_AllStates(){o._states={}}track_Variable(e,t,r=(()=>!0)){if(!o._tracking_enabled)return;const n=this.get_Channel(),i={Time:(new Date).getTime(),Channel:n,Namespace:n.split(\":\")[0].split(\"?\")[0],Id:this.get_Id(),Variable:e,Value:void 0===t?this.copy_Var(e):t};r(i)&&o._track_stack.push(i)}static track_Variable(e,t,r){if(!o._tracking_enabled)return;const n={Time:(new Date).getTime(),Channel:e,Namespace:e.split(\":\")[0].split(\"?\")[0],Id:\"-\",Variable:t,Value:r};o._track_stack.push(n)}static get_AllTrackRecords(){return o._tracking_enabled?o._track_stack:n.C_State.E_TrackingOff}static get_AllTrackedChannels(){return o._tracking_enabled?o._track_stack.map(e=>e.Channel).filter((e,t,r)=>r.indexOf(e)===t):n.C_State.E_TrackingOff}static get_AllTrackedNamespaces(){return o._tracking_enabled?o._track_stack.map(e=>e.Namespace).filter((e,t,r)=>r.indexOf(e)===t):n.C_State.E_TrackingOff}static get_SomeTrackRecords(e,t=!0,r=i.e_filterMode.And){if(!o._tracking_enabled)return n.C_State.E_TrackingOff;let s=o._track_stack.filter(t=>{const n=e.sniff(\"Time\",()=>!0,([e,r])=>(void 0===e||t.Time>=e)&&(void 0===r||t.Time<=r)),o=e.sniff(\"Channels\",()=>!0,e=>void 0!==e.find(e=>t.Channel===e)||0===e.length),s=e.sniff(\"Namespaces\",()=>!0,e=>void 0!==e.find(e=>t.Namespace===e)||0===e.length);return[n,o,e.sniff(\"Variables\",()=>!0,e=>void 0!==e.find(e=>t.Variable===e)||0===e.length),e.sniff(\"Call\",()=>!0,e=>e(t)),s].reduce((e,t)=>{switch(e=void 0===e||e,r){case i.e_filterMode.And:return e&&t;case i.e_filterMode.Or:return e||t}})});return t&&(s=s.map(e=>(delete e.Channel,delete e.Time,delete e.Id,e))),s}set_OptionalProperties(e,t){return e.forEach(e=>{this.assign_Property(e,t)}),this}set_RequiredProperties(e,t){return e.forEach(e=>{if(!this.assign_Property(e,t))throw new Error(n.C_State.E_PropertyRequired.subs(e))}),this}assign_Property(e,t){let r=e.split(o.SEPARATOR.Expression).slice(-1)[0];return t.sniff(r,()=>!1,()=>(this.set_Var(e,t[r]),!0))}set_OptionalClasses(e,t){return Object.keys(e).forEach(r=>{this.assign_Class(e,r,t)}),this}set_RequiredClasses(e,t){return Object.keys(e).forEach(r=>{if(!this.assign_Class(e,r,t))throw new Error(n.C_State.E_PropertyRequired.subs(r))}),this}throw_OverloadError(e=[\"empty\"]){throw new Error(n.C_State.E_ChOverload.subs(this._channel,this._id,JSON.stringify(e)))}assign_Class(e,t,r){let n=t.split(o.SEPARATOR.Expression),i=n.slice(-1)[0];if(r.hasOwnProperty(i)){const o=Array.isArray(r[i])?r[i]:[r[i]];return this.get_Vars().pave(n,()=>{this.throw_OverloadError(n)},()=>o.map(r=>new e[t](r))),!0}return!1}}t.State=o,o._states={},o._track_stack=[],o._tracking_enabled=!0}).call(this,r(4))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_State={E_VarNotDefined:\"Instance %0/%1 is not defined\",E_TrackingOff:\"Tracking Disabled\",E_PropertyRequired:\"Property '%0' is required\",E_ChOverload:\"Channel overload occured at: %0.%1\\n%2\",E_AlreadyDefined:\"State already defined\",E_CalledBeforeDeclaration:\"State called before declaration\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(3);t.M_State=n.M_State;var i=r(0);t.State=i.State},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(0),i=r(1);t.M_State=class{initialize_State(e){if(void 0!==this._state)throw new Error(i.C_State.E_AlreadyDefined);const t=this.get_GlobalNamespace();return this._state=new n.State(t),void 0!==e&&this._state.set_Vars(e),this}get_State(){if(!(this._state instanceof n.State))throw new Error(i.C_State.E_CalledBeforeDeclaration);return this._state}remove_State(){this._state.remove_State()}}},function(e,t){var r;r=function(){return this}();try{r=r||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(r=window)}e.exports=r},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);Object.prototype.sniff=function(e,t,r){void 0===t&&(t=function(){return!1}),void 0===r&&(r=function(){return!0});for(var i=this,o=0,s=Array.isArray(e)?e:e.split(n.Separator.Expression);o<s.length;o++){var a=s[o];if(void 0===i[a])return t(i);i=i[a]}return r(i)},Object.prototype.pave=function(e,t,r){void 0===t&&(t=function(){return Object}),void 0===r&&(r=function(){return Object});var i=Array.isArray(e)?e:e.split(n.Separator.Expression),o=i.pop(),s=this,a=function(e){if(void 0===e[o])return e[o]=r()||{},!0;var n=t();return n&&(e[o]=n),!1};if(!(i.length>0))return a(s);s.sniff(i,(function(){for(var e=0,t=i;e<t.length;e++){var r=t[e];s[r]=s[r]?s[r]:{},s=s[r]}return a(s)}),(function(e){return a(e)}))},Object.prototype.is_empty=function(){for(var e in this)if(this.hasOwnProperty(e))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(e){return\"function\"==typeof this[e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Separator={Expression:\".\"}}]))},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),String.prototype.toProperCase=function(){return this.replace(/\\w\\S*/g,e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())},String.prototype.minify=function(){return this.replace(/\\s/g,\"\")},String.prototype.chop=function(e=50){const t=new RegExp(`.{1,${e}}`,\"g\");return this.match(t)||[]},String.prototype.subs=function(...e){return e.reduce((e,t,r)=>e.replace(`%${r}`,t),this)}}]))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.And=0]=\"And\",e[e.Or=1]=\"Or\"}(t.e_filterMode||(t.e_filterMode={}))}]))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.C_Resolver={RulesVarName:\"RESOLUTION_RULES\",E_NonPotentAttempt:\"Attempt to enable string that isn't a disabled passage\",E_NonStringType:\"Non-string type given to enable_Passage\",E_DoesNotCarry:\"Base does not carry expression '%1'\\n\",E_DepthInconsistent:\"MinDepth cannot be larger than MaxDepth\",E_TooDeep:\"Resolution is deeper than the max allowed depth\",E_TooShallow:\"Resolution is shallower than the min allowed depth\",E_MinTrailDepthLimit:\"min trail depth cannot be smaller than 1\",DISABLED_PHRASE:\"<<DISABLED>>\",EXPRESSION_SEPARATOR:\".\"}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){e[e.Instantiate=0]=\"Instantiate\",e[e.Method=1]=\"Method\",e[e.Key=2]=\"Key\"}(t.e_expressionType||(t.e_expressionType={})),function(e){e[e.Null=0]=\"Null\",e[e.Object=1]=\"Object\",e[e.Array=2]=\"Array\",e[e.Other=3]=\"Other\",e[e.Undefined=4]=\"Undefined\",e[e.VariableType=5]=\"VariableType\",e[e.Resolution=6]=\"Resolution\",e[e.ResolutionInstruction=7]=\"ResolutionInstruction\"}(t.e_typeDefinition||(t.e_typeDefinition={}))},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(0);t.Resolution=n.Resolution;var i=r(7);t.Resolver=i.Resolver},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(8);const n=r(3),i=r(2),o=r(1),s=r(0),a=r(4),u=r(5),c=\"RI\";class l extends(o.Parent().with(n.M_State,i.M_Namespace)){constructor(e){super(),this.set_GlobalNamespace(e).initialize_State({MinTrailDepth:1,MaxTrailDepth:100,Recursion:!1})}get_EntryPoint(){return this.get_State().get_Var(\"EntryPoint\")}set_ExpressionTrail(e){const t=[c,e];return this.set_Resolution(new s.Resolution(t)),this}set_ExpressionStack(e){const t=[c,s.Resolution.produce_ExpressionTrail_FromExpressionStack(e)];return this.set_Resolution(new s.Resolution(t)),this}set_ResolutionInstruction(e){return this.set_Resolution(new s.Resolution(e)),this}set_Resolution(e){return this.set_Passage(e),this}remove_Resolution(){}set_Passage(e){return this.get_State().set_Var(\"EntryPoint\",e),this}static disable_Passage(e){return a.C_Resolver.DISABLED_PHRASE+JSON.stringify(e)}static enable_Passage(e){const t=a.C_Resolver.DISABLED_PHRASE;if(this.is_DisabledPassage(e))return JSON.parse(e.slice(t.length));throw new Error(a.C_Resolver.E_NonStringType+\"\\n\"+JSON.stringify(e))}static is_DisabledPassage(e){const t=a.C_Resolver.DISABLED_PHRASE;return\"string\"==typeof e&&e.slice(0,t.length)===t}set_Sources(e){return this.get_State().set_Var(\"Sources\",e),this}get_Sources(){return this.get_State().get_Var(\"Sources\")}set_MaxResolutionDepth(e){return this.get_State().set_Var(\"MaxTrailDepth\",e),this}get_MaxResolutionDepth(){return this.get_State().get_Var(\"MaxTrailDepth\")}set_MinResolutionDepth(e){if(e<1)throw new Error(a.C_Resolver.E_MinTrailDepthLimit);return this.get_State().set_Var(\"MinTrailDepth\",e),this}get_MinResolutionDepth(){return this.get_State().get_Var(\"MinTrailDepth\")}check_ResolutionDepth(e){const t=this.get_MaxResolutionDepth(),r=this.get_MinResolutionDepth();let n=[];if(r>t&&n.push(a.C_Resolver.E_DepthInconsistent),e.produce_ResolutionDepth()>=t&&n.push(a.C_Resolver.E_TooDeep),e.produce_ResolutionDepth()<r&&n.push(a.C_Resolver.E_TooShallow),0!==n.length)throw new Error(n.join(\"\\n\")+JSON.stringify(e))}set_Recursion(e){return this.get_State().set_Var(\"Recursion\",e),this}get_Recursion(){return this.get_State().get_Var(\"Recursion\")}produce_Resolute(){const e=this.get_EntryPoint(),t=this.build_Items(e);return this.remove_State(),t}build_Items(e){switch(l.check_ItemType(e)){case u.e_typeDefinition.ResolutionInstruction:e=new s.Resolution(e);case u.e_typeDefinition.Resolution:return this.build_Resolution(e);case u.e_typeDefinition.Array:return this.build_Array(e);case u.e_typeDefinition.Object:return this.build_Object(e);default:return e}}build_Array(e){if(e.length>0){const t=e.map(e=>this.build_Items(e));return l.concatenate_Items(t)}}build_Object(e){let t={};return\"function\"==typeof e||\"Promise\"===e.constructor.name?t=e:Object.entries(e).forEach(([e,r])=>{switch(l.check_ItemType(r)){case u.e_typeDefinition.ResolutionInstruction:const n=new s.Resolution(r);t[e]=this.build_Resolution(n);break;case u.e_typeDefinition.Array:t[e]=this.build_Array(r);break;case u.e_typeDefinition.Object:t[e]=this.build_Object(r);break;default:t[e]=r}}),t}build_Resolution(e){this.check_ResolutionDepth(e);let t=this.get_Sources();const r=this.retrieve_ResolutionRules(e),n=e.produce_ExecutionStepStack(r);return n.forEach(e=>{const r=e[1],i=e[0];if(this.check_ExpressionAvailability(t,r,n),i===u.e_expressionType.Key)t=t[r];else{const n=this.build_Arguments(e[2]);t=i===u.e_expressionType.Instantiate?new t[r](...n):t[r](...n)}}),this.build_Items(t)}check_ExpressionAvailability(e,t,r){void 0===e[t]&&console.warn(a.C_Resolver.DoesNotCarry.replace(\"%1\",t),r)}build_Arguments(e){return void 0!==e?e.map(e=>{switch(l.check_ItemType(e)){case u.e_typeDefinition.ResolutionInstruction:const t=new s.Resolution(e);return this.build_Resolution(t);case u.e_typeDefinition.Object:return this.build_Object(e);case u.e_typeDefinition.Array:return this.build_Array(e);default:return e}}):[]}static check_ItemType(e){return null===e?u.e_typeDefinition.Null:void 0===e?u.e_typeDefinition.Undefined:e instanceof s.Resolution?u.e_typeDefinition.Resolution:s.Resolution.is_ResolutionInstruction(e)?u.e_typeDefinition.ResolutionInstruction:Array.isArray(e)?u.e_typeDefinition.Array:e.is_Object()?u.e_typeDefinition.Object:u.e_typeDefinition.Other}static retrieve_ItemTypeArray(e){const t=l.check_ItemType(e[0]);return e.every(e=>t===l.check_ItemType(e))?t:u.e_typeDefinition.VariableType}static concatenate_Items(e){let t={};switch(l.retrieve_ItemTypeArray(e)){case u.e_typeDefinition.Object:t=l.concatenate_Objects(e);break;case u.e_typeDefinition.Array:break;default:t=e}return t}static concatenate_Objects(e){let t={};return e.reduce((e,r)=>(Object.keys(r).forEach(n=>{let i=r[n],o=e.sniff(n);switch(l.check_ItemType(i)){case u.e_typeDefinition.Array:t[n]=[...o?e[n]:[],...i];break;case u.e_typeDefinition.Object:t[n]=o?l.concatenate_Items([e[n],i]):i;break;default:t[n]=o?e[n]+i:i}}),t))}retrieve_ResolutionRules(e){const t=this.get_Sources(),r=e.get_ExpressionStack()[0],n=a.C_Resolver.RulesVarName;return t.sniff([s.Resolution.extract_MethodName(r),n],()=>({}),e=>e)}}t.Resolver=l},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1);Object.prototype.sniff=function(e,t,r){void 0===t&&(t=function(){return!1}),void 0===r&&(r=function(){return!0});for(var i=this,o=0,s=Array.isArray(e)?e:e.split(n.Separator.Expression);o<s.length;o++){var a=s[o];if(void 0===i[a])return t(i);i=i[a]}return r(i)},Object.prototype.pave=function(e,t,r){void 0===t&&(t=function(){return Object}),void 0===r&&(r=function(){return Object});var i=Array.isArray(e)?e:e.split(n.Separator.Expression),o=i.pop(),s=this,a=function(e){if(void 0===e[o])return e[o]=r()||{},!0;var n=t();return n&&(e[o]=n),!1};if(!(i.length>0))return a(s);s.sniff(i,(function(){for(var e=0,t=i;e<t.length;e++){var r=t[e];s[r]=s[r]?s[r]:{},s=s[r]}return a(s)}),(function(e){return a(e)}))},Object.prototype.is_empty=function(){for(var e in this)if(this.hasOwnProperty(e))return!1;return!0},Object.prototype.is_Object=function(){return this===Object(this)},Object.prototype.has_Function=function(e){return\"function\"==typeof this[e]}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Separator={Expression:\".\"}}]))}]));\r\n//# sourceMappingURL=index.js.map","import { i_map } from \"./t_controller\";\r\n\r\n/**\r\n * Handles getting and setting of separator strings\r\n */\r\nexport abstract class SeparatorHandler {\r\n\r\n    protected static _SEPARATOR: i_map<string>;\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tINSTANTIATION\r\n *\r\n * ============================================================================\r\n */\r\n    /**\r\n     * Handles setting and getting of separator strings\r\n     */\r\n    constructor() {\r\n        this.set_Separators_FromGlobal();\r\n    }\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tHANDLE SEPARATORS\r\n */\r\n\r\n    /**\r\n     * Imports separators if they are available globally\r\n     */\r\n    protected set_Separators_FromGlobal(): void {\r\n        if (global.hasOwnProperty(\"Separator\")) {\r\n            this.set_Separators(\r\n                // @ts-ignore\r\n                global.Separator,\r\n            );\r\n        } else {\r\n            this.set_Separators({\r\n                Directory: \"/\",\r\n                Expression: \".\",\r\n                Id: \"-\",\r\n                Dialogue: \"?\",\r\n                Monologue: \":\",\r\n                Namespace: \"/\",\r\n                Extension: \".\",\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets internal separators for Controller class\r\n     * \r\n     * @param separators\r\n     */\r\n    protected set_Separators(separators: i_map<string>): void {\r\n        SeparatorHandler._SEPARATOR = separators;\r\n    }\r\n\r\n    /**\r\n     * Returns the separator string for the specified name\r\n     * \r\n     * @param separator_name\r\n     */\r\n    protected get_Separator(separator_name: string): string {\r\n        return SeparatorHandler._SEPARATOR[separator_name];\r\n    }\r\n}\r\n","/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tEXPORTS\r\n *\r\n * ============================================================================\r\n */\r\n\r\nexport { Controller } from \"./Controller/controller\";\r\nexport { M_Controller } from \"./Mixins/m_controller\";\r\nexport { M_ControllerEvents } from \"./Mixins/m_controller_events\";\r\n\r\nexport {\r\n    C_Controller,\r\n    C_StartupTalk,\r\n    C_BootState,\r\n} from \"./Common/c_controller\";\r\n\r\nexport {\r\n    e_Scope,\r\n    t_transmission,\r\n    t_subscription,\r\n    t_sequenceStep,\r\n    t_dependency_group,\r\n    t_service,\r\n    t_reception,\r\n    t_channel,\r\n    t_waitSet,\r\n} from \"./Common/t_controller\";\r\n","\r\n/*\r\n *\tCOMMON CLASSES\r\n */ \r\nimport { EventEmitter } from \"@utkusarioglu/event-emitter\";\r\nimport { Resolution } from \"@utkusarioglu/resolver\";\r\nimport { SeparatorHandler } from \"../Common/separator_handler\";\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATATYPES\r\n */\r\nimport {\r\n    t_serviceId,\r\n    t_waitSet,\r\n    t_transmission,\r\n    e_ServiceGroup,\r\n    e_Scope,\r\n    t_singleScope,\r\n    t_channel,\r\n    t_epoch,\r\n} from \"../Common/t_controller\";\r\nimport {\r\n    t_resolutionInstruction,\r\n    t_resolutionInstructionNoArgs,\r\n    t_expressionTrail,\r\n} from \"@utkusarioglu/resolver\";\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\n\r\n\r\n\r\n/**\r\n * Extends event emitter to include specific send and receive functions for \r\n * a single scope. Controller class introduces local and global scopes using \r\n * this class\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport class BaseController extends SeparatorHandler {\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /** \r\n     *  Event emitter for talk and listen use cases\r\n     */\r\n    private _monologue_emitter = new EventEmitter().setMaxListeners(20); // this increase may have some speed cost\r\n\r\n    /**\r\n     *  Event emitter for services\r\n     */\r\n    private _dialogue_emitter = new EventEmitter().setMaxListeners(20); // this increase may have some speed cost;\r\n\r\n    /**\r\n     *  Stores runtime announcements\r\n     */\r\n    private _announcement_archive: object[] = [];\r\n\r\n    /**\r\n     *  Stores runtime requests and responds\r\n     */\r\n    private _dialogue_archive: object[] = [];\r\n\r\n    /**\r\n     * Scope that the basecontroller is currently working on\r\n     */\r\n    private _controller_scope: t_singleScope; // BaseController doesn't use this, but it's useful for debuging\r\n\r\n/*\r\n *\tThese will be used in future feature expansions\r\n */\r\n    // private static _static_reserve = {};\r\n    // private _open_requests: object[] = [];\r\n    // private _open_annuncements: object[] = [];\r\n    // private _open_subscriptions: object[] = [];\r\n    // private _open_waits: object[] = [];\r\n    // private _open_wait_dependencies: object[] = [];\r\n\r\n    /**\r\n     * Extends event emitter to include specific send and receive functions \r\n     * for a single scope. Controller class introduces local and global scopes \r\n     * using this class\r\n     * \r\n     * @param controller_scope\r\n     * \r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    constructor(controller_scope: t_singleScope) {\r\n        super();\r\n        this._controller_scope = controller_scope;\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDIALOGUE\r\n *\t\r\n *\t2 way data transfer between nodes\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREQUEST\r\n */\r\n\r\n    /**\r\n     * Requests data from the given channel\r\n     * \r\n     * @remarks \r\n     * this method is a part of the Controller subsystem.\r\n     * Works in tandem with  {@link BaseController.(serve:instance)}\r\n     * \r\n     * \r\n     * @param sender_namespace namespace of the requesting class\r\n     * @param recipient_namespace namespace that is intended to receive the \r\n     * request\r\n     * @param talk the resolution that the responder will process\r\n     * @param group defines the set of methods that will be used for the service\r\n     * \r\n     * @returns Requested data inside the transmission wrapper object as \r\n     * Promise<t_transmission>\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public request(\r\n        scope: e_Scope,\r\n        sender_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        talk: t_resolutionInstruction,\r\n        group: e_ServiceGroup,\r\n    ): Promise<any> {\r\n\r\n        const service_id: t_serviceId = BaseController.create_RandomServiceId();\r\n        const request_channel: t_channel = recipient_namespace +\r\n            this.get_Separator(\"Dialogue\") +\r\n            group;\r\n        const response_channel: t_channel = request_channel +\r\n            this.get_Separator(\"Id\") +\r\n            service_id;\r\n        const request_packet: t_transmission = {\r\n            Channel: response_channel,\r\n            Sender: sender_namespace,\r\n            Recipient: recipient_namespace,\r\n            Talk: talk,\r\n            Id: service_id,\r\n            Time: (new Date()).getTime(),\r\n            Static: false,\r\n            Scope: scope,\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._dialogue_emitter\r\n                .once((response_channel), (response_packet: t_transmission) => {\r\n\r\n                response_packet.sniff(\"Error\",\r\n                    resolve.bind(null, response_packet),\r\n                    reject.bind(null, response_packet),\r\n                );\r\n\r\n                this.archive_Dialogue(request_packet, response_packet);\r\n            });\r\n\r\n            this._dialogue_emitter.emit(\r\n                request_channel,\r\n                request_packet as t_transmission,\r\n            );\r\n        });\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tRESPOND\r\n */\r\n\r\n    /**\r\n     * Responds to controller requests\r\n     * {@link A_Controller} class introduces include_Services method for \r\n     * registering responses\r\n     *\r\n     * @param responder_namespace\r\n     * @param listen the resolution that the respond method will be \r\n     * listening to\r\n     * @param requester_namespace the namespace that is intended to receive \r\n     * the message\r\n     * @param response the callback function that will create the response \r\n     * for the request\r\n     * @param is_static if true, the created response will be saved for the \r\n     * controller for\r\n     * speedy re-response in future requests, if false, the response callback \r\n     * will be called\r\n     * everytime the same request is made\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public respond(\r\n        responder_namespace: t_namespace,\r\n        response_callback: (transmission: t_transmission) => Promise<any>,\r\n        group: e_ServiceGroup,\r\n        scope: e_Scope,\r\n    ): void {\r\n\r\n        const listen_channel: t_channel =\r\n            responder_namespace +\r\n            this.get_Separator(\"Dialogue\") +\r\n            group;\r\n\r\n        this._dialogue_emitter.on(listen_channel,\r\n            (transmission: t_transmission) => {\r\n\r\n                response_callback(transmission)\r\n                    .then((requested_return_content: any) => { \r\n\r\n                        const serve_packet: t_transmission = {\r\n                            Sender: transmission.Recipient,\r\n                            Recipient: transmission.Sender,\r\n                            Talk: transmission.Talk,\r\n                            Content: requested_return_content,\r\n                            Time: (new Date()).getTime(),\r\n                            Static: false,\r\n                            Scope: scope,\r\n                        };\r\n\r\n                        this._dialogue_emitter\r\n                            .emit(\r\n                                transmission.Channel as t_channel,\r\n                                serve_packet,\r\n                            );\r\n\r\n                    }) // then\r\n                    .catch((error) => {\r\n                        console.log(\"serve error:\", error);\r\n                    });\r\n\r\n            }); // dialogue emitter\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   DOCUMENT and REPORT for DIALOGUE\r\n */\r\n\r\n    /**\r\n     * Archives the given dialogue data\r\n     * \r\n     * @param request_packet\r\n     * @param response_packet\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private archive_Dialogue(\r\n        request_packet: t_transmission,\r\n        response_packet: t_transmission,\r\n    ): void {\r\n\r\n        this._dialogue_archive.push({\r\n            Meta: {\r\n                Elapsed: (new Date()).getTime() - request_packet.Time,\r\n                State: response_packet.hasOwnProperty(\"Error\")\r\n                    ? \"Fail\"\r\n                    : \"Success\",\r\n            },\r\n            Request: request_packet,\r\n            Response: response_packet,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a random service Id for the service channel to be unique\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private static create_RandomServiceId(): t_serviceId {\r\n        return Math.random().toString().slice(2);\r\n    }\r\n\r\n    /**\r\n     * Returns the entire history of dialogues since the App run\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public get_DialogueArchive() {\r\n        return this._dialogue_archive;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Returns all the channels that are being served\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public publicget_ServedChannels() {\r\n        return this._dialogue_emitter.eventNames();\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tMONOLOGUE\r\n *\t\r\n *\tTransmission during which the emitter or listener do not acknowledge \r\n *\teach other\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tTALK\r\n */\r\n\r\n    /**\r\n     * Declares to a channel and doesnt expect a response\r\n     * \r\n     * @param sender_namespace namespace of the class that is making the \r\n     * announcement\r\n     * @param recipient_namespace namespace that is the main subject of the \r\n     * announcement\r\n     * @param talk the content us being transmitted\r\n     * @param scope Scope of the message. Scope does not have any part in \r\n     * emittance, \r\n     * it's required for archiving\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public announce(\r\n        scope: t_singleScope,\r\n        sender_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        talk: t_resolutionInstruction,\r\n        delay: boolean | t_epoch = false,\r\n    ): void {\r\n\r\n        const expression_trail: t_expressionTrail =\r\n            Resolution.extract_ExpressionTrail_FromResolutionInstruction(talk);\r\n\r\n        const announcement_channel: string = recipient_namespace +\r\n            this.get_Separator(\"Monologue\") +\r\n            expression_trail;\r\n\r\n        const announcement_packet: t_transmission = {\r\n            Channel: announcement_channel,\r\n            Sender: sender_namespace,\r\n            Recipient: recipient_namespace,\r\n            Talk: talk,\r\n            Time: (new Date()).getTime(),\r\n            Static: false,\r\n            Scope: scope,\r\n        };\r\n\r\n        const do_announcement = () => {\r\n\r\n            this._monologue_emitter.emit(\r\n                announcement_channel,\r\n                announcement_packet,\r\n            );\r\n\r\n            this.archive_Announcement(\r\n                sender_namespace,\r\n                announcement_channel,\r\n                announcement_packet,\r\n            );\r\n        };\r\n\r\n        if (delay) {\r\n\r\n            if (delay === true) {\r\n                delay = C_Controller.GraceTime as unknown as t_epoch;\r\n            }\r\n\r\n            setTimeout(do_announcement, delay as t_epoch);\r\n\r\n        } else {\r\n            do_announcement();\r\n        }\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *   DOCUMENT and REPORT for TALK\r\n */\r\n\r\n    /**\r\n     * Returns entire announcement archive since the start of the app\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public get_AnnouncementArchive(): object[] {\r\n        return this._announcement_archive;\r\n    }\r\n\r\n    /**\r\n     * Archives the given announcement data\r\n     * \r\n     * @param sender_namespace\r\n     * @param announcement_channel\r\n     * @param announcement_packet\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    private archive_Announcement(\r\n        sender_namespace: t_namespace,\r\n        announcement_channel: t_channel,\r\n        announcement_packet: any = null,\r\n    ): void {\r\n\r\n        this._announcement_archive.push({\r\n            Namespace: sender_namespace,\r\n            Channel: announcement_channel,\r\n            Content: announcement_packet,\r\n            Time: (new Date()).getTime(),\r\n        });\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tLISTEN\r\n */\r\n\r\n    /**\r\n     * Listens to the specified channel. The talkers are not notified of who's \r\n     * listening\r\n     * \r\n     * @param sender_namespace: namespace of the class that is listening\r\n     * @param subcribed_namespace the target that is being subscribed to\r\n     * @param listen  resolution that will be listened for\r\n     * @param callback: function that will be executed when there is a new \r\n     * signal at the \r\n     * specified channel\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public subscribe(\r\n        scope: t_singleScope,\r\n        subcribed_namespace: t_namespace,\r\n        listen: t_resolutionInstructionNoArgs,\r\n        callback: (transmission: t_transmission) => void,\r\n    ): void {\r\n\r\n        const expression_trail: t_expressionTrail =\r\n            Resolution.extract_ExpressionTrail_FromResolutionInstruction(listen);\r\n\r\n        const channel: t_channel = subcribed_namespace +\r\n            this.get_Separator(\"Monologue\") +\r\n            expression_trail;\r\n\r\n        this._monologue_emitter.on(\r\n            channel,\r\n            callback as (transmission: t_transmission) => void,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     *  Similar to subscribe, listens to a specific channel but does not respond\r\n     *  to the source, Unlike subscribe, wait quits listening after a certain \r\n     *  number of occurences of the  channel, default = 1 also, wait has the \r\n     *  built in capacity to check whether the received emit meets the expected \r\n     *  criteria through the test callback\r\n     *\r\n     * @param waiter_namespace namespace of the class that is waiting\r\n     * @param recipient_namespace namespace that is being awaited \r\n     * @param listen method or announcement to listen to\r\n     * @param test_callback callback for determining whether the channel signal \r\n     * meets \r\n     * the wait criteria\r\n     * @param action_callback callback to execute if the test callbak returns true\r\n     * @param total_count number of times wait function will wait for the test \r\n     * callback to return true\r\n     * @param current_count current iteration count of the wait\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public wait(\r\n        scope: t_singleScope,\r\n        waiter_namespace: t_namespace,\r\n        recipient_namespace: t_namespace,\r\n        listen: t_resolutionInstructionNoArgs,\r\n        test_callback: (transmission: t_transmission) => boolean = () => true ,\r\n        action_callback: (transmission: t_transmission) => any =\r\n            (transmission) => transmission,\r\n        total_count: number = 1,\r\n        current_count: number = total_count,\r\n    ): Promise<any> {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const once_callback_function = (transmission: t_transmission) => {\r\n\r\n                if (test_callback(transmission)) {\r\n                    current_count--;\r\n                    resolve(action_callback(transmission));\r\n                } else {\r\n\r\n                    const new_promise = this.wait(\r\n                            scope,\r\n                            waiter_namespace,\r\n                            recipient_namespace,\r\n                            listen,\r\n                            test_callback,\r\n                            action_callback,\r\n                            total_count,\r\n                            current_count,\r\n                        );\r\n\r\n                    resolve(new_promise);\r\n                }\r\n            }; \r\n\r\n            if (current_count > 0) {\r\n\r\n                const expression_trail: t_expressionTrail =\r\n                    Resolution.extract_ExpressionTrail_FromResolutionInstruction(\r\n                        listen,\r\n                    );\r\n\r\n                const channel: t_channel = recipient_namespace +\r\n                    this.get_Separator(\"Monologue\") +\r\n                    expression_trail;\r\n\r\n                return this._monologue_emitter.once(\r\n                    channel,\r\n                    once_callback_function,\r\n                );\r\n            }\r\n\r\n        }) // return new promise\r\n            .catch((error_content: any) => {\r\n                console.error(\r\n                    \"BaseController.wait.Promise.catch:\\n\", error_content,\r\n                );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits multiple conditions and returns promise when all of them are met\r\n     * \r\n     * @param waiter_namespace: namespace of the class that is waiting\r\n     * @param wait_set: set of wait conditions to be met\r\n     *\r\n     * @remarks\r\n     * Class: Basecontroller\r\n     * Service: Controller\r\n     */\r\n    public wait_Some(\r\n        scope: t_singleScope,\r\n        waiter_namespace: t_namespace,\r\n        wait_set: t_waitSet[],\r\n    ): Promise<t_transmission[]> {\r\n        return Promise.all(wait_set.map((wait_event: t_waitSet) => {\r\n            return this.wait(\r\n                scope,\r\n                waiter_namespace,\r\n                wait_event.Namespace,\r\n                wait_event.Listen,\r\n                wait_event.Test,\r\n                wait_event.Call,\r\n            );\r\n        }));\r\n    }\r\n}\r\n","!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1);t.EventEmitter=r.EventEmitter},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.EventEmitter=class{constructor(){this._events={}}on(e,t){this.onOnce(e,t,!1)}once(e,t){this.onOnce(e,t,!0)}onOnce(e,t,n){const r={Once:n,Callback:t};this._events.hasOwnProperty(e)?this._events[e].push(r):this._events[e]=[r]}emit(e,t){this._events.hasOwnProperty(e)&&this._events[e].forEach((n,r)=>{n.Once&&this._events[e].splice(r,1),0===this._events[e].length&&delete this._events[e],n.Callback(t)})}setMaxListeners(e){return this}eventNames(){return Object.keys(this._events)}}}]));\r\n//# sourceMappingURL=index.js.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/// <reference path=\"../Controller/controller.ts\" />\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/*\r\n *\tLOCALS\r\n */\r\nimport { Controller } from \"../Controller/controller\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport { C_Controller } from \"../Common/c_controller\";\r\n\r\n/**\r\n * Provides autocorrect for M_Controller\r\n * \r\n * @remarks\r\n * Class: M_Controller\r\n * Service: Controller\r\n */\r\nexport interface M_Controller extends M_Namespace {}\r\n\r\n\r\n\r\n/**\r\n * Provides Controller functionality\r\n * \r\n * @requires M_Namespace\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport abstract class M_Controller {\r\n\r\n    private _controller!: Controller;\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\r\n * ============================================================================\r\n */\r\n\r\n    /**\r\n     * Sets or overwrites the controller for the class\r\n     *\r\n     * @remarks\r\n     * Class: M_Controller\r\n     * Service: Controller\r\n     */\r\n    protected set_Controller(): void {\r\n\r\n        if (this._controller) {\r\n            throw new Error(C_Controller.E_AlreadyDefined);\r\n        }\r\n\r\n        this._controller = new Controller(this.get_GlobalNamespace());\r\n\r\n        if (this.has_LocalNamespace()) {\r\n            this._controller.set_LocalNamespace(this.get_LocalNamespace());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the controller for the class\r\n     *\r\n     * @remarks\r\n     * Class: M_Controller\r\n     * Service: Controller\r\n     */\r\n    protected get_Controller(): Controller {\r\n\r\n        if (!(this._controller instanceof Controller)) {\r\n            throw new Error(C_Controller.E_CalledBeforeDeclaration);\r\n        }\r\n\r\n        return this._controller;\r\n    }\r\n\r\n}\r\n","\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tIMPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/*\r\n *\tDEPENDENCIES\r\n */\r\nimport { M_State } from \"@utkusarioglu/state\";\nimport { M_Namespace } from \"@utkusarioglu/namespace\";\r\n\r\n/*\r\n *\tLOCALS\r\n */\r\nimport { M_Controller } from \"./m_controller\";\r\n\r\n/*\r\n *\tCONSTANTS\r\n */\r\nimport {\r\n    C_Controller,\r\n    C_BootState,\r\n    C_StartupTalk,\r\n} from \"../Common/c_controller\";\r\n\r\n/*\r\n *\tDATA TYPES\r\n */\r\nimport {\r\n    t_subscription,\r\n    t_reception,\r\n    t_dependency_group,\r\n    t_service,\r\n    t_announcement,\r\n    e_Scope,\r\n    e_ServiceGroup,\r\n    t_transmission,\r\n    t_singleScope,\r\n    t_sequenceStep,\r\n} from \"../Common/t_controller\";\r\nimport {\r\n    t_resolutionInstructionNoArgs,\r\n    t_resolutionInstruction,\r\n} from \"@utkusarioglu/resolver\";\r\nimport { t_namespace } from \"@utkusarioglu/namespace\";\r\nimport { t_epoch } from \"@utkusarioglu/state/t_state\";\r\n\r\n\r\n\r\n/* ////////////////////////////////////////////////////////////////////////////\r\n *\r\n *\tEXPORTS\r\n *\r\n * ///////////////////////////////////////////////////////////////////////// */\r\n\r\n/**\r\n * Provides autocorrect for the class\r\n * \r\n * @requires M_Controller\r\n *\r\n * @remarks\r\n * Class: M_ControllerEvents\r\n * Service: Controller\r\n */\r\nexport interface M_ControllerEvents extends\r\n    M_Controller,\r\n    M_State,\r\n    M_Namespace { }\r\n\r\n\r\n\r\n/**\r\n * Introduces methods for registering subscriptions, dependencies, \r\n * announcements, and services for the extending class Handles the order of \r\n * operations for the controller  to run smoothly\r\n * The associated controller needs to be run by the child class \r\n * Global (and if needed, Local) namespaces need to be set before the \r\n * initializer is run Needs @link State function to be defined in the \r\n * parent to determine the local namespace\r\n * \r\n * @remarks\r\n * Service: Controller\r\n */\r\nexport abstract class M_ControllerEvents {\r\n\r\n/*\r\n *\tLOGS\r\n */\r\n    private _subscriptions!: Array<t_subscription>;\r\n    private _announcements!: Array<t_announcement>;\r\n    private _receptions!: Array<t_reception>; // this isn't emitted, it's only for archiving\r\n    private _dependencies!: Array<t_dependency_group>;\r\n    private _services!: Array<t_service>;\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tDECLARATION\r\n *\t\r\n *\tDeclaration of controls by the instantiating class\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tINCLUDE CONTROLS\r\n */\r\n\r\n    /**\r\n     * Includes the given array items among the subscriptions for the set local \r\n     * or global namespace\r\n     * \r\n     * @param subscription_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Subscriptions(\r\n        subscription_list: Array<t_subscription>,\r\n    ): this {\r\n\r\n        if (!this._subscriptions) {\r\n            this._subscriptions = [];\r\n        }\r\n\r\n        this._subscriptions.push(...subscription_list);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among the dependencies for the set local \r\n     * or global namespace\r\n     * \r\n     * @param dependencies_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Dependencies(\r\n        dependencies_list: t_dependency_group[],\r\n    ): this {\r\n\r\n        if (!this._dependencies) {\r\n            this._dependencies = [];\r\n        }\r\n\r\n        this._dependencies.push(...dependencies_list);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among announcement and subscriptions.\r\n     * Unlike other methos, this registers 2 different events\r\n     * \r\n     * @param reception_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Receptions(reception_list: t_reception[]): this {\r\n\r\n        if (!this._receptions) {\r\n            this._receptions = [];\r\n        }\r\n\r\n        if (!this._subscriptions) {\r\n            this._subscriptions = [];\r\n        }\r\n\r\n        if (!this._announcements) {\r\n            this._announcements = [];\r\n        }\r\n\r\n        this._receptions.push(...reception_list);\r\n\r\n        reception_list.forEach((reception: t_reception) => {\r\n\r\n            this._subscriptions.push({\r\n                Scope: reception.Scope,\r\n                Namespace: reception.Namespace || this.get_GlobalNamespace(),\r\n                Listen: reception.Listen,\r\n                Call: reception.Call,\r\n            } as t_subscription);\r\n\r\n            this._announcements.push({\r\n                Scope: reception.Scope,\r\n                Namespace: reception.Namespace,\r\n                Talk: reception.Talk,\r\n            } as t_announcement);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Includes the given array items among the services for the set local or \r\n     * global namespace\r\n     * \r\n     * @param services_list\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public include_Services(services_list: t_service[]): this {\r\n\r\n        if (!this._services) {\r\n            this._services = [];\r\n        }\r\n\r\n        this._services.push(...services_list);\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n/*\r\n * ======================================================= Boundary 1 =========\r\n *\r\n *\tIMPLEMENTATION\r\n *\t\r\n *\tRegistration of controls\r\n *\tAnnouncement of startup states\r\n *\r\n * ============================================================================\r\n */\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tINITIALIZE CONTROLS\r\n */\r\n\r\n    /**\r\n     * Runs listen and talk operations in the order and times that they are \r\n     * supposed to be run\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    public initialize_Controller(): this {\r\n\r\n        this.set_Controller();\r\n\r\n\r\n        // Listens\r\n        this.get_Controller()\r\n            .wait(\r\n                e_Scope.Global,\r\n                C_Controller.AllServices,\r\n                C_StartupTalk.run_Listen,\r\n                undefined,\r\n                () => {\r\n\r\n                    this.register_Dependencies();\r\n                    this.register_Subscriptions();\r\n\r\n                    this.announce_ToAllServices(C_BootState.ListenReady);\r\n                },\r\n            );\r\n\r\n        // Talks\r\n        this.get_Controller()\r\n            .wait(\r\n                e_Scope.Global,\r\n                C_Controller.AllServices,\r\n                C_StartupTalk.run_Talk,\r\n                undefined,\r\n                () => {\r\n\r\n                    this.register_Announcements();\r\n                    this.register_Services();\r\n\r\n                    this.announce_ToAllServices(C_BootState.TalkReady);\r\n                },\r\n            );\r\n\r\n        this.announce_ToAllServices(C_BootState.ClassReady, 200)\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tREGISTER CONTROLS\r\n *\t\r\n *  These are used by the method {@link initialize_Controller} to register \r\n *  included controls\r\n */\r\n\r\n    /**\r\n     * Excetutes controller for the subscriptions that were registered by the\r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Subscriptions(): void {\r\n        if (this._subscriptions) {\r\n            this._subscriptions.forEach((subscription: t_subscription) => {\r\n                this.get_Controller().subscribe(\r\n                    subscription.Scope,\r\n                    subscription.Namespace,\r\n                    subscription.Listen,\r\n                    subscription.Call,\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the dependencies that were registered by the \r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Dependencies(): void {\r\n        if (this._dependencies && this._dependencies.length > 0) {\r\n            this._dependencies\r\n                .forEach((dependency: t_dependency_group) => {\r\n                    this.get_Controller().wait_Some(\r\n                        dependency.Scope,\r\n                        dependency.Members,\r\n                    )\r\n                        .then((data) => {\r\n                            return dependency.Call(data);\r\n                        })\r\n                        .then(\r\n                            this.announce_ToAllServices.bind(\r\n                                this,\r\n                                C_BootState.DependencyReady,\r\n                            ),\r\n                        );\r\n            });\r\n        } else {\r\n            this.announce_ToAllServices(C_BootState.DependencyReady);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the announcements that were registered by the\r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Announcements(): void {\r\n        if (this._announcements) {\r\n            this._announcements.forEach((announcement: t_announcement) => {\r\n                this.get_Controller().announce(\r\n                    announcement.Scope,\r\n                    announcement.Namespace,\r\n                    announcement.Talk,\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Excetutes controller for the services that were registered by the \r\n     * include method\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    private register_Services(): void {\r\n        if (this._services) {\r\n            this._services.forEach((service: t_service) => {\r\n                this.get_Controller().respond(\r\n                    service.Scope,\r\n                    service.Call,\r\n                    service.Static || false,\r\n                    e_ServiceGroup.Standard,\r\n                );\r\n            }); \r\n        }\r\n    }\r\n\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tMANAGE CONTROLLER SEQUENCES\r\n */\r\n\r\n    /**\r\n     * Executes the provided Controller talks and listens in sequence\r\n     * \r\n     * @param sequence_steps\r\n     * @param scope\r\n     * @param manager_namespace\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected manage_ControllerSequence(\r\n        sequence_steps: Array<t_sequenceStep>,\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n    ): Promise<any> {\r\n\r\n        let TEST;\r\n        //return Promise.resolve(this.get_GlobalNamespace());\r\n\r\n        const step_promise_stack:\r\n            Array<Promise<t_resolutionInstructionNoArgs>> = [];\r\n\r\n        let steps_promise_sequence: Promise<void> = Promise.resolve();\r\n\r\n        sequence_steps.forEach((step, index) => {\r\n\r\n            step_promise_stack[index] =\r\n                this.produce_PromiseStackMember(\r\n                    scope,\r\n                    manager_namespace,\r\n                    step\r\n                );\r\n\r\n            steps_promise_sequence = steps_promise_sequence\r\n                .then(() => {\r\n                    return this.produce_StepsPromise(\r\n                        scope,\r\n                        manager_namespace,\r\n                        step_promise_stack,\r\n                        step,\r\n                        index,\r\n                    );\r\n\r\n                }); // steps_promise_sequence.then\r\n\r\n        }); // sequence_steps.forEach\r\n\r\n        //return Promise.resolve(sequence_steps[0].List);\r\n\r\n        return steps_promise_sequence;\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param scope\r\n     * @param manager_namespace\r\n     * @param step\r\n     */\r\n    produce_PromiseStackMember(\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n        step: t_sequenceStep,\r\n    ): Promise<any> {\r\n        return new Promise((resolve_step_promise) => {\r\n            return this.get_Controller().wait(\r\n                scope,\r\n                manager_namespace,\r\n                step.Listen,\r\n                (transmission: t_transmission) => {\r\n\r\n                    step.List = step.List.filter((value: string) => {\r\n                        return value !== transmission.Sender;\r\n                    });\r\n\r\n                    return step.List.length < 1;\r\n\r\n                },\r\n                () => {\r\n                    return resolve_step_promise(step.Listen);\r\n                },\r\n            ); // return this.get_Controller().wait\r\n\r\n        }); // step_promise_stack[index]\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param scope\r\n     * @param manager_namespace\r\n     * @param step_promise_stack\r\n     * @param step\r\n     * @param index\r\n     */\r\n    produce_StepsPromise(\r\n        scope: t_singleScope,\r\n        manager_namespace: t_namespace,\r\n        step_promise_stack: Array<Promise<any>>,\r\n        step: t_sequenceStep,\r\n        index: number,\r\n    ): Promise<any> {\r\n\r\n        step.sniff([\"StartMessage\"], undefined,\r\n            (start_message: string) => {\r\n                console.log(start_message);\r\n            });\r\n\r\n        step.sniff([\"Talk\"], undefined,\r\n            (step_talk: t_resolutionInstructionNoArgs) => {\r\n                this.get_Controller().announce(\r\n                    scope,\r\n                    manager_namespace,\r\n                    step_talk,\r\n                );\r\n            });\r\n\r\n        const index_str: string = index.toString();\r\n\r\n        return step_promise_stack.sniff([index_str],\r\n            () => {\r\n                throw new Error(\r\n                    C_Controller.E_ActiveStepMemberCount\r\n                        .subs(index_str)\r\n                );\r\n            },\r\n            () => {\r\n                const active_step_promise_stack =\r\n                    step_promise_stack.slice(0, index + 1);\r\n\r\n                return Promise.all(active_step_promise_stack);\r\n            });\r\n    }\r\n\r\n\r\n/* --------------------------------------------------------- Use Case ---------\r\n *\tANNOUNCE STATES \r\n */\r\n\r\n    /**\r\n     * Standardized method for announcing to all services\r\n     * \r\n     * @param resolution_instruction\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected announce_ToAllServices(\r\n        resolution_instruction: t_resolutionInstruction,\r\n        delay: t_epoch = 0,\r\n    ): void {\r\n        this.get_Controller().announce(\r\n            e_Scope.Global,\r\n            C_Controller.AllServices,\r\n            resolution_instruction,\r\n            delay,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Standardized method for library adding\r\n     * \r\n     * @param library_source_namespace\r\n     *\r\n     * @remarks\r\n     * Class: M_ControllerEvents\r\n     * Service: Controller\r\n     */\r\n    protected announce_LibraryAdded(\r\n        library_source_namespace: t_namespace,\r\n    ): void {\r\n        this.get_Controller().announce(\r\n            e_Scope.Global,\r\n            C_Controller.AllServices,\r\n            [\r\n                ...C_BootState.LibraryAdded,\r\n                [library_source_namespace],\r\n            ] as t_resolutionInstruction,\r\n            true,\r\n        );\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}